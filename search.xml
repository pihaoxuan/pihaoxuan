<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>chatgpt镜像</title>
    <url>/2023/05/06/chatgpt%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7beb9758fd6664143f3df7975372238161c601144ded625797ba1b969527a7ba">4630436162ade97ba2718b7d0c4b3b63492810e13ad85be96e947ea4cb65291430a49bb22ad32d84514670596647149d7c92fe70cc097ce99432d6eddecce600fad1be98eebf5ebc7267d7570a201229361d4601678f68284fac1faa62f257283de9c1d84d76d52a5d274a0ee68cafbfb91d67d40a478ff73a1ad594d725f4da9498f1f68e505b55bf44b90b8ef5feae4de5a06f4d567e6c2d194242617d2bed2a2b0d60b841753c3e1dcc3f00300b27691e5ffc477dfa6bcd8f8cc6bce4d54cae1b1ca80b7220554bf03c25e69fb7a5073c4ba05eb2bd3c9e0f8eec510d1acecd510767dc145016e3a07d486ab66fb5493658d1c5ffc1b1fbbf8ce6c9ffb8a5e3e4d0e42004203d5db442eb2f7206fa4a31054912f2428aba3c5b62bbdf601b83c3e3434d481590219e979cfc12f1c02756d30174bccf981abc1edf19f8725f0bb920ad5eaca2ad404607adde4dee9aebb3be366203a4393a2b324c439a6e57407dc13a9b1ae9c375123f1645ea6268a5215d0fcc6dfc46d951222ed405e44e49e78104be5dd5674ca8def738053863480150529d69b87a45a8788ba517ecfd1ab5ac8e38e2741ac0f8c4383df5930be5bb8bcc284aa9aac5e434770a032dee240dc6549e8e800afd9954fd51663dcd15b735954903f2036daf0e434049f27dba3f3d143b614545f26acf5d161b6ccc96d5f471bda843facdf9ba37f0a02fde454aa6af0c81eec42693e0feae575e381303f41e1ed50dbc4fad93738baab316c2ada34affbfc44f9265fe4e0a85cf35b543bce952ed93f1d87af67d6b3617008373a081675e1c3d05747eff2051b5cb316c740d36132a263b302ce245f0079f2a23384a442ec7a4746039bea493700ae105d1b9f286e7ed9a8c670c9b377487e9193531853be2eb3499f7e64f5f415506ab41cea87d217068baf64dfd137e738c94050e3c44a040dc385eca0d360c3c88cb447d783ccbe0b46866f318d459677869888c33e16105042f9892b3897d8c16b92585978201d35cce7740821d2b915aa94d49735f7be058242dad461b4892442830e6344be389c0d965690e9a2d30f6b1c07db59756f3210947333da4e4bbf96cf05c3f7d41f0be38ba0dac374c4357393fa84b8a3da4acae8b698c67dedc8bba49db46fdcf0fda5203c83c0c6591f48790a4bd4c75168b0dea6117b176f83a9f0b59e68e3fec8f06c4ffa262028c1efcbacad7d0262b3151a45326fcb28b4b804c69333257e7aef59ee7fd732ca3cbf92e36cef2ed8624318fea85f562cf243988c9b90d5a503f004a8a8e88a96699285f7a54509ac44f289acf346a35b95444bb2621e0eff711f716d16618a370f295378f33307f77dc891a67db10c20d4debae8a802dfaf520412b0828d0aa017fde902b4d2851b83d35d9579d2b99a8d1caf2b6fd9544ff7f6c66af89e2e8972fe00693b388a24173bf42d2838f726bb97bec2a11e25ff8b3fd3668911c3c72c8db6030a98b67a313dc19ba6fed53f890a8c57617b7f07373b746a0bdd0e37fa0f7bcccaa93d601aa11d11cf4377628e19a975e2f40e0129629e90c737cf1d888677884a00a3ce04029b107a5dbf3ee711ff17ed73330d8f0e4d172ae40d6a5c4de55c8ede96ca5cf5eee9074c0594608bc128e59707ed59d3271bd2c9a0ba8b9a18082ffebe4c148bf1689c0a8e228e4d9d39a6e9c2b9fac311018a86da11b61c22c61a00100c5241ca8a5b2574382cea775aa17052d35ec6fe37d2389ce094a2da54a03c96112553f7c26d380d7f52f418f02298da6dfe829defd46dc1a0c5d31cbf8c28857fab294bcb458464e0586c26126cd61b98cf789848fe2783c811138feaffee580d032ce932cf7931540e20199ecfcd59b186fa1759ecd082ddb353226c2cea2404c467bd3ce30c8eeed473928ff4f27acbedfe26ce3ed4ecd4dc87f2d296602775c6733d7dd14ca6ae213845ffecd87c1bf45a0bb5263dbd20e8cd061a96f05aba4e770f963966d5aebc1ad14129f329d75cf262a71f100473e1b6ec3af60b283c033c5956dc965bbb9b90a076efb439eb604fe93579678595600dde7ac0d76551b4788633a841a6c3a230141187e6794460107230a69e017b0d35617a68002a3ccb06e183fb33a0b21e8e5783ddbed84e32b7f6c5883a98222583c24d03ceddec98873eada1fd0b61cd3f10f2c818ad40d9622f37c653facfff2824f2fca83d0c6ca07876339ed128c94faf29242101a79193c32304ebcaa1e3c5d865341ca8bbc0dab90f5f459c0bf0b0c50d5c0e2edbd79b0fe25e36c155cf2ff6f91814270f2e4d54950f7a249a919fd4cdea45b653e53676f6ac402e0c794b411023ae460a41edcfd24698ffcbf92e5c30cc5c6cdbf211fb64e74636d6de56bbdee88920fe87dfb59f534ddd98c5aac8aba9fb1243e1d0ff47a7fd4172cf1b0a9efd8f3af94354fa58da2deef458ba4ce6ad1778a93b8d7718f779ac3189c6be49e0edc2538082837f1f090beda0b0b3362943213f5c1aa9f6bbe28914b086988503ce1603c3627260c10f575a3481b31c630a94499da2c8f536aca35845bd4e50c9adfd6d32019502dd15d8e02ea83a8bb584e110a2d1a9a9fd3bac98b9f8333e33b6cac78b4264cad76c9a9265f93571bb42fc594cc94506126e01ee71dd9f0da3930edce74b03e24749e105572403b482721da43008cb09b3fa9c418ce39d1475353a7bfc29be01e482107b2cdbf366ecda0af9ccc5dc678cbb9055d99a7e15ff8196740e414018fa65b12c603f3e1de5fb5a9d9a55bbccb803b400db1746862dcfd64646de25aec7696850f8627f55d486528ad18257640aed82bf2e91c0b1d11845dc6457ef55eda666f96729d74dac58c67b8af13b6e27c22854d6301d0f296ebd5e079d50505590e22847bb99d4c69b6bfc2e582e9fd825c8f66defe5ecd93486e93f67a4eb280a49e0b251668a23e16fd1bf0f64d8bc5557d9a745655c51081abf7dba39a5448db984fbb26c36f2f9162145ca0a9d1dc44e5e4a4f5826947875bf8dd40f47691cf550da82c811c859036e245c116b51382286fa3dd5b4ab29f00dfbb9fe5d9abae90c835d96d4239c44fe6a318e56c817008f618e2a23e7c59e76a13b034aa185fd9aec91389dc3dbd80c0c705edf933cecc531363a3a206a1b9c67a1399269a699e8a2d6c015f58d0d84b63f9f93b25dcd443720190486a693cec2cc14dcdb0e1705f9cc8f01814f89a97088eecbe4b21b26259562a47f573d3780fa8db20f3b08c782870f4fbe8622f6819f88d5623eaea9aca12c45a22210857e8238d1d7610b8305a65c6ef9b57ed07443e86ded6cb819ea817de5dcf152ba65b4c449100220ae43259222fa5d22b04043c0ac364965c571dc0b320d7630d1cba4e469b3c857e9775b9601a2d7a44a3900c5148351def220634895dfaeb573654263d0df7fc31bbbbe46efe2e498e191467dcf9d2cef8d51bf0de3bb54c0a8a60708d9480a937fddf3f28a49411bc18c40338348e2be8349fd8d98672570452f331f73d737ea29bbabed733867e82b46454852beb1df7acee1b926de84ba17fc77d2f93bb122869d4b7edfe211cdd4b120ad1e59beee902f16bb34e884b97c6351b6c19d7fd2eaf198a565a96b1525c9c6ee3fb3ca252dc8a9598a5ec682f8518a7b6fcaa9f5b628fa8d1e99857b100b068908721df1363f44179b22831116cbe20d40f68df7e10a210aba69864e75ba14540751afb65c99f0c32164b2abeac25c17e95f41c15f49dfca5699f751b1da68e8f3ddd1311306688320c6fbd7ba958a24a38b5a903d5f8e79bc8088a421ac9756d4d87ea4e83b48edef9b6275f62a68908f892e6ff33f0c6c7074ce833376ed8baeb0692e93698ee0471667b72ef0df5f48432d12f454ba02a810d4c942d1061036129c1a104fd6c8a7671409a75e774e52ab08bfd2e6a6311cca7ad39d51c67aa5fe0484d05573c86b1264b4527b4fbc4712bce8bc7c45e598cbb117cc53ce270a1524a28b379c3a0b12667fd2d61ad016dd59839dc8426a11cf1da9231ff701b080e87b5f9184471f76529c6d5238952f2321302d0a202ab1f72b8ee83cc58b3fabdf13c1b660c23b327109eeb99b4bc4e89dd0545</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>chatgpt</category>
      </categories>
      <tags>
        <tag>chatgpt镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>编译学习资源</title>
    <url>/2023/05/09/%E7%BC%96%E8%AF%91%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h1 id="编译学习"><a href="#编译学习" class="headerlink" title="编译学习"></a>编译学习</h1><span id="more"></span>

<h4 id="两本书"><a href="#两本书" class="headerlink" title="两本书"></a>两本书</h4><p>《深入理解计算机系统》（第三版）可以看。中英文都有电子书，看着玩。</p>
<p><a href="https://www.aliyundrive.com/s/bKVNaXMakYF">英文《深入理解计算机系统》</a></p>
<p><a href="https://www.aliyundrive.com/s/vDQCkVCdThz">中文《深入理解计算机系统》</a></p>
<p>《编译原理》（第二版），其实也就是龙书，偏原理，老师推荐我先写起来，自己写着玩玩。</p>
<p><a href="https://pan.baidu.com/s/1_xTFRTalGZc_XiGfW7ND2A?pwd=zhao">《编译原理》（第二版）</a></p>
<h4 id="三个网站"><a href="#三个网站" class="headerlink" title="三个网站"></a>三个网站</h4><p>①<a href="https://lotabout.me/2015/write-a-C-interpreter-0/">手把手教你构建 C 语言编译器</a></p>
<p>②<a href="https://space.bilibili.com/296494084/channel/collectiondetail?sid=571708">编译器B站视频</a></p>
<p>③<a href="https://github.com/rui314/chibicc/commits/main?before=90d1f7f199cc55b13c7fdb5839d1409806633fdb+315&branch=main&qualified_name=refs/heads/main">Commits · rui314&#x2F;chibicc (github.com)</a></p>
<p>慢慢看吧，之后有新的资源会加进来的！</p>
<p>收藏夹吃灰系列</p>
<p>END</p>
]]></content>
      <categories>
        <category>编译</category>
      </categories>
      <tags>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理实验1</title>
    <url>/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/</url>
    <content><![CDATA[<p>实验一：直方图均衡化、对数变换、幂次变换</p>
<span id="more"></span>

<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>掌握基本图像增强算法的实现</p>
<h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><ul>
<li>直方图均衡化图像增强</li>
<li>对数图像增强</li>
<li>幂次图像增强</li>
</ul>
<h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><h3 id="直方图均衡化图像增强"><a href="#直方图均衡化图像增强" class="headerlink" title="直方图均衡化图像增强"></a>直方图均衡化图像增强</h3><blockquote>
<p>①对图像遍历，统计出每个像素的出现次数（即频率），形成直方图</p>
<p>②对所有频率求和</p>
<p>③对直方图的每个频率除以所有频率的和，求出归一化到0-255的范围</p>
<p><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/%E5%85%AC%E5%BC%8F1.jpg"></p>
</blockquote>
<h3 id="对数图像增强"><a href="#对数图像增强" class="headerlink" title="对数图像增强"></a>对数图像增强</h3><blockquote>
<p>s &#x3D; c * log(1+r)</p>
</blockquote>
<h3 id="幂次图像增强"><a href="#幂次图像增强" class="headerlink" title="幂次图像增强"></a>幂次图像增强</h3><blockquote>
<p>s &#x3D; c * pow(r,γ)</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直方图均衡化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_image</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="comment"># 使用PIL库读取图像</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(file_path).convert(<span class="string">&quot;L&quot;</span>)  <span class="comment"># 转为灰度图像，L 代表灰度模式</span></span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">histogram_equalization</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="comment"># 获取图像的直方图</span></span><br><span class="line">    histogram = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">    width, height = image.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            pixel_value = image.getpixel((x, y))</span><br><span class="line">            histogram[pixel_value] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算累积分布函数 列表</span></span><br><span class="line">    cumulative_distribution = [<span class="built_in">sum</span>(histogram[:i+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化到0-255的范围</span></span><br><span class="line">    normalized_cdf = [<span class="built_in">int</span>(cumulative_distribution[i]/cumulative_distribution[-<span class="number">1</span>] * <span class="number">255</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 应用均衡化</span></span><br><span class="line">    equalized_image = Image.new(<span class="string">&quot;L&quot;</span>, (width, height))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            pixel_value = image.getpixel((x, y))</span><br><span class="line">            equalized_value = normalized_cdf[pixel_value]</span><br><span class="line">            equalized_image.putpixel((x, y), equalized_value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> equalized_image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 读取图像</span></span><br><span class="line">    input_path = <span class="string">&quot;../clear.bmp&quot;</span></span><br><span class="line">    original_image = read_image(input_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行直方图均衡化</span></span><br><span class="line">    equalized_image = histogram_equalization(original_image)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示原始图像和均衡化后的图像</span></span><br><span class="line">    original_image.show(title=<span class="string">&quot;Original Image&quot;</span>)</span><br><span class="line">    equalized_image.show(title=<span class="string">&quot;Equalized Image&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存均衡化后的图像</span></span><br><span class="line">    output_path = <span class="string">&quot;../historgram_result/clear_my.bmp&quot;</span></span><br><span class="line">    equalized_image.save(output_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对数强化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_image</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="comment"># 使用PIL库读取图像</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(file_path).convert(<span class="string">&quot;L&quot;</span>)  <span class="comment"># 转为灰度图像，L 代表灰度模式</span></span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_transform</span>(<span class="params">image, c, base</span>):</span><br><span class="line">    width, height = image.size</span><br><span class="line"></span><br><span class="line">    equalized_image = Image.new(<span class="string">&quot;L&quot;</span>, (width, height))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            pixel_value = image.getpixel((x, y))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 对数变换t</span></span><br><span class="line">            log_transformed_value = c * math.log10(pixel_value + <span class="number">1</span>) / math.log10(base)</span><br><span class="line">            <span class="comment"># print(log_transformed_value)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将变换后的值限制在[0, 255]的范围内</span></span><br><span class="line">            log_transformed_value = (log_transformed_value/ math.log10(base))*<span class="number">255</span></span><br><span class="line"></span><br><span class="line">            equalized_image.putpixel((x, y), <span class="built_in">int</span>(log_transformed_value))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> equalized_image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 读取图像</span></span><br><span class="line">    input_path = <span class="string">&quot;../lab1-7.tif&quot;</span></span><br><span class="line">    original_image = read_image(input_path)</span><br><span class="line"></span><br><span class="line">    base = <span class="number">150</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行直方图均衡化</span></span><br><span class="line">    equalized_image = log_transform(original_image,<span class="number">1</span>,base)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示原始图像和均衡化后的图像</span></span><br><span class="line">    original_image.show(title=<span class="string">&quot;Original Image&quot;</span>)</span><br><span class="line">    equalized_image.show(title=<span class="string">&quot;Equalized Image&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存均衡化后的图像</span></span><br><span class="line">    output_path = <span class="string">&quot;../log_transform/lab1-7_my_&quot;</span>+<span class="built_in">str</span>(base)+<span class="string">&quot;_.tif&quot;</span></span><br><span class="line">    equalized_image.save(output_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 幂次强化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_image</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="comment"># 使用PIL库读取图像</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(file_path).convert(<span class="string">&quot;L&quot;</span>)  <span class="comment"># 转为灰度图像，L 代表灰度模式</span></span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_transform</span>(<span class="params">image, c, base</span>):</span><br><span class="line">    width, height = image.size</span><br><span class="line"></span><br><span class="line">    equalized_image = Image.new(<span class="string">&quot;L&quot;</span>, (width, height))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            pixel_value = image.getpixel((x, y))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 幂次变换</span></span><br><span class="line">            log_transformed_value = c * math.<span class="built_in">pow</span>(pixel_value,base)</span><br><span class="line">            <span class="comment"># print(log_transformed_value)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将变换后的值限制在[0, 255]的范围内</span></span><br><span class="line">            log_transformed_value = (log_transformed_value/ (math.<span class="built_in">pow</span>(<span class="number">255</span>,base)))*<span class="number">255</span></span><br><span class="line"></span><br><span class="line">            equalized_image.putpixel((x, y), <span class="built_in">int</span>(log_transformed_value))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> equalized_image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 读取图像</span></span><br><span class="line">    input_path = <span class="string">&quot;../unclear.bmp&quot;</span></span><br><span class="line">    original_image = read_image(input_path)</span><br><span class="line"></span><br><span class="line">    base = <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行直方图均衡化</span></span><br><span class="line">    equalized_image = log_transform(original_image,<span class="number">1</span>,base)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示原始图像和均衡化后的图像</span></span><br><span class="line">    original_image.show(title=<span class="string">&quot;Original Image&quot;</span>)</span><br><span class="line">    equalized_image.show(title=<span class="string">&quot;Equalized Image&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存均衡化后的图像</span></span><br><span class="line">    output_path = <span class="string">&quot;../power_transform/unclear_my_&quot;</span>+<span class="built_in">str</span>(base)+<span class="string">&quot;_.bmp&quot;</span></span><br><span class="line">    equalized_image.save(output_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>说明：第一行左边为原图，右边为直方图均衡化后的图；第二行左边为log变换后的图，右边为幂次变换后的图，参数会在对应位置说明</p>
<p>上传到网页，排版很可能出现问题，如果出问题，那么从上到下依次是 原图、直方图均衡化、log、幂次</p>
<p>下图log变换底数为300，幂次变换指数为5</p>
<p><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/bright.bmp#pic_left" alt="bright" style="zoom: 50%;"><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/historgram_result/bright_my.bmp#pic_right" alt="bright_my" style="zoom: 50%;"></p>
<p><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/log_transform/bright_my_300_.bmp#pic_left" alt="bright_my_30_" style="zoom:50%;"><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/power_transform/bright_my_5_.bmp#pic_right" alt="bright_my_5_" style="zoom:50%;"></p>
<p>下图log变换底数为100，幂次变换指数为2</p>
<p><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/clear.bmp#pic_left" alt="clear" style="zoom:50%;"><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/historgram_result/clear_my.bmp#pic_right" alt="clear_my" style="zoom:50%;"></p>
<p><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/log_transform/clear_my_100_.bmp#pic_left" alt="clear_my_100_" style="zoom:50%;"><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/power_transform/clear_my_2_.bmp#pic_right" alt="clear_my_2_" style="zoom:50%;"></p>
<p>下图log变换底数为50，幂次变换指数为0.5</p>
<p><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/dark.bmp#pic_left" alt="dark" style="zoom:50%;"><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/historgram_result/dark_my.bmp#pic_right" alt="dark_my" style="zoom:50%;"></p>
<p><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/log_transform/dark_my_50_.bmp#pic_left" alt="dark_my_50_" style="zoom:50%;"><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/power_transform/dark_my_0.5_.bmp#pic_right" alt="dark_my_0.5_" style="zoom:50%;"></p>
<p>下图log变换底数为100，幂次变换指数为2</p>
<p><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/unclear.bmp#pic_left" alt="unclear" style="zoom:50%;"><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/historgram_result/unclear_my.bmp#pic_right" alt="unclear_my" style="zoom:50%;"></p>
<p><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/log_transform/unclear_my_100_.bmp#pic_left" alt="unclear_my_100_" style="zoom:50%;"><img src="/2023/11/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C1/power_transform/unclear_my_2_.bmp#pic_right" alt="unclear_my_2_" style="zoom:50%;"></p>
<p>下图log变换底数为100，幂次变换指数为2 （tif文件不能插入到markdown中，请看PDF文件）</p>
<p>PDF文件略有不同，影响不大</p>
<br>

]]></content>
      <categories>
        <category>数字图像处理实验</category>
      </categories>
      <tags>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>其它git使用方法</title>
    <url>/2023/10/22/%E5%85%B6%E5%AE%83git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一些其它git的使用方法"><a href="#一些其它git的使用方法" class="headerlink" title="一些其它git的使用方法"></a>一些其它git的使用方法</h1><span id="more"></span>

<p>⚠⚠⚠</p>
<p>在多人协作开发中，自己在改代码的时候一定要先<code>git pull origin master</code>对远程仓库的代码进行最新版同步后再自己修改，避免在自己修改之后<code>push</code>不上去。（如果实在是忘记了，应该可以有命令解决，解决方法在下文）</p>
<h2 id="当pull代码时出现报错，描述为：本地代码有修改，git不知道怎么办，你打算："><a href="#当pull代码时出现报错，描述为：本地代码有修改，git不知道怎么办，你打算：" class="headerlink" title="当pull代码时出现报错，描述为：本地代码有修改，git不知道怎么办，你打算："></a>当<code>pull</code>代码时出现报错，描述为：本地代码有修改，<code>git</code>不知道怎么办，你打算：</h2><p><img src="/2023/10/22/%E5%85%B6%E5%AE%83git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/%E5%BD%93%60pull%60%E4%BB%A3%E7%A0%81%E6%97%B6%E5%87%BA%E7%8E%B0%E6%8A%A5%E9%94%99%EF%BC%8C%E6%8F%8F%E8%BF%B0%E4%B8%BA%EF%BC%9A%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%9C%89%E4%BF%AE%E6%94%B9%EF%BC%8C%60git%60%E4%B8%8D%E7%9F%A5%E9%81%93%E6%80%8E%E4%B9%88%E5%8A%9E.jpg" alt="当`pull`代码时出现报错，描述为：本地代码有修改，`git`不知道怎么办"></p>
<p>上图就是本地有修改后想<code>pull</code>远程仓库的代码下来，<code>git</code>的做法</p>
<h3 id="①放弃本地修改，直接照抄远程仓库代码"><a href="#①放弃本地修改，直接照抄远程仓库代码" class="headerlink" title="①放弃本地修改，直接照抄远程仓库代码"></a>①放弃本地修改，直接照抄远程仓库代码</h3><p>使用指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将本地的<code>HEAD</code>指针指向了上一个版本，删除了暂存区（暂存区就是<code>add</code>到的地方）的内容，而且还删除了本地工作区的内容。</p>
</blockquote>
<p>简单来说就是将本地的<code>add</code>和<code>commit</code>全部撤销，并且清空工作区的内容，像是将<code>git</code>恢复到了上一级的“出厂设置”。</p>
<p>执行指令后，就会看到类似于这样一段话</p>
<blockquote>
<p>HEAD is now at 上一版本号 上一版本<code>commit</code>内容</p>
</blockquote>
<p>这样就是成功了！</p>
<p>之后正常<code>pull</code>就能成功了，之后就会出现下图的反馈<br><img src="/2023/10/22/%E5%85%B6%E5%AE%83git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/pull%E6%88%90%E5%8A%9F%E5%90%8E%E7%9A%84%E5%8F%8D%E9%A6%88.jpg" alt="`pull`成功后的反馈"></p>
<h3 id="②保留本地修改，不要远程仓库的修改（即以本地为准）"><a href="#②保留本地修改，不要远程仓库的修改（即以本地为准）" class="headerlink" title="②保留本地修改，不要远程仓库的修改（即以本地为准）"></a>②保留本地修改，不要远程仓库的修改（即以本地为准）</h3><h3 id="③合并两者的修改，并将其中冲突处人工检测解决冲突"><a href="#③合并两者的修改，并将其中冲突处人工检测解决冲突" class="headerlink" title="③合并两者的修改，并将其中冲突处人工检测解决冲突"></a>③合并两者的修改，并将其中冲突处人工检测解决冲突</h3><h2 id="git-add-指令"><a href="#git-add-指令" class="headerlink" title="git add  _____ 指令"></a><code>git add  _____</code> 指令</h2><p><code>git add .</code>：将所有 <strong>修改过的 新增的</strong> 文件添加到暂存区，但是不会管<strong>被删除的</strong>文件。</p>
<p><code>git add -u</code>：即<code>git add -update</code>，只管被监控了的文件，就是将已经被<code>add</code>了的文件（即暂存区的文件）如果有修改，就会更新。所以它<strong>不会管新文件</strong>，因为新文件没有被监控。会管<strong>修改过的</strong>和<strong>删除的</strong>文件。</p>
<p><code>git add -a</code>：即<code>git add -all</code>，是上面两个<code>git</code>的集合，会提交所有<strong>被删除</strong>、<strong>被修改</strong>、和<strong>新增的</strong>文件到数据暂存区</p>
<p>PS：如何查看自己项目目录下的文件的状态？</p>
<blockquote>
<p>使用<code>git status</code>命令就可以，下面复制</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>



<h2 id="当你使用commit指令的时候发现自己手瘸，打错字了，你选择："><a href="#当你使用commit指令的时候发现自己手瘸，打错字了，你选择：" class="headerlink" title="当你使用commit指令的时候发现自己手瘸，打错字了，你选择："></a>当你使用<code>commit</code>指令的时候发现自己手瘸，打错字了，你选择：</h2><p>①再次使用<code>git commit -m &quot;这次争取打对字&quot; </code>。</p>
<p>恭喜你，获得<strong>报错</strong>一次，欸嘿嘿。</p>
<blockquote>
<p>当第一次使用<code>commit</code>指令的时候，本地的<code>git</code>认为你提交了你的修改记录，所以此时你的工作区已经被清空了，因为你本地已经提交成功了，此时没有修改，没有再次<code>add</code>，是不会让你再次<code>commit</code>的</p>
</blockquote>
<p>②打开网址 <a href="https://pi_haoxuan.gitee.io/2023/10/22/%E5%85%B6%E5%AE%83git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/">其它git使用方法 | SPINNING PEN (gitee.io)</a> 找方法</p>
<p>再次恭喜你，选对了方法！！！</p>
<blockquote>
<p><code>git reset --soft HEAD~1</code>指令：撤销提交并保留更改在暂存区（即回退到<code>add</code>完成之后）</p>
<p><code>git reset --mixed HEAD~1</code>指令：撤销提交并取消更改（即回退到<code>add</code>完成之前）</p>
<p><code>git reset --hard HEAD~1</code>指令： 撤销提交并<strong>删除</strong>所有更改（即回退到文件修改之前，未修改状态，或者说上一次提交完成后的状态）</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>clash_for_windows</title>
    <url>/2023/10/19/clash-for-windows/</url>
    <content><![CDATA[<h1 id="科学上网！！"><a href="#科学上网！！" class="headerlink" title="科学上网！！"></a>科学上网！！</h1><span id="more"></span>

<p>分享一款科学上网的软件：clash for Windows</p>
<p>顾名思义，就是Windows操作系统下科学上网的工具</p>
<p>如果需要在mac上或者是在Linux上使用科学上网工具，也可以使用它的Linux版本和mac版本</p>
<p>以下就是下载链接了：</p>
<h3 id="下面三个都是Windows下的不同版本的clash"><a href="#下面三个都是Windows下的不同版本的clash" class="headerlink" title="下面三个都是Windows下的不同版本的clash"></a>下面三个都是Windows下的不同版本的clash</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/Clash.for.Windows-0.20.19-ia32-win.7z">Clash for Windows 0.20.19英文版本</a></p>
<p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/Clash.for.Windows-0.20.21-win.7z">Clash for Windows 0.20.21英文版本</a></p>
<p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/Clash.for.Windows.Setup.0.20.38.exe">Clash for Windows 0.20.38且汉化版本</a></p>
<h3 id="在Linux系统上，又有两个不同的clash，一个是arm64架构下的Linux的clash，另一个是x64架构下的clash"><a href="#在Linux系统上，又有两个不同的clash，一个是arm64架构下的Linux的clash，另一个是x64架构下的clash" class="headerlink" title="在Linux系统上，又有两个不同的clash，一个是arm64架构下的Linux的clash，另一个是x64架构下的clash"></a>在Linux系统上，又有两个不同的clash，一个是arm64架构下的Linux的clash，另一个是x64架构下的clash</h3><h4 id="arm64架构"><a href="#arm64架构" class="headerlink" title="arm64架构"></a>arm64架构</h4><p><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.38/Clash.for.Windows-0.20.38-arm64-linux.tar.gz">Clash.for.Windows-0.20.38-arm64-linux版本</a></p>
<h4 id="x64架构"><a href="#x64架构" class="headerlink" title="x64架构"></a>x64架构</h4><p><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.38/Clash.for.Windows-0.20.38-x64-linux.tar.gz">Clash.for.Windows-0.20.38-x64-linux版本</a></p>
<h3 id="最后一个就是mac适用发clash了"><a href="#最后一个就是mac适用发clash了" class="headerlink" title="最后一个就是mac适用发clash了"></a>最后一个就是mac适用发clash了</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile2.0/Clash.for.Windows-0.20.38-arm64-mac.7z">Clash for mac 0.20.38版本</a></p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2023/10/09/git/</url>
    <content><![CDATA[<h1 id="一些关于远程git使用的心得"><a href="#一些关于远程git使用的心得" class="headerlink" title="一些关于远程git使用的心得"></a>一些关于<strong>远程git</strong>使用的心得</h1><span id="more"></span>

<p><strong>说明：本文使用Ubuntu20.04系统和gitee操作，理论上来说Windows系统和github的操作方法是一样的，只是有些路径不太一样。</strong></p>
<h3 id="预备条件"><a href="#预备条件" class="headerlink" title="预备条件"></a>预备条件</h3><p>首先需要有安装<code>git</code>（对于Windows平台来说，Linux应该是自带有git）</p>
<p>其次需要有gitee账号和一个新建的仓库</p>
<p>以上两项不会的自行查找资料，很简单的。(算了，我还是附上两（sì）个链接吧)</p>
<p><a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%7B%22request_id%22:%22169682895716800182799938%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169682895716800182799938&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115693833-null-null.142%5Ev95%5EchatgptT3_1&utm_term=git%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Windows下的Git 详细安装教程——详细到你不想看</a></p>
<p><a href="https://blog.csdn.net/m0_70102063/article/details/132166986?ops_request_misc=&request_id=&biz_id=102&utm_term=Linux%E4%B8%8B%E7%9A%84git%E5%AE%89%E8%A3%85&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-132166986.142%5Ev95%5EchatgptT3_1&spm=1018.2226.3001.4187">Linux系统上安装Git详细步骤</a></p>
<p><strong>gitee账号创建：对不起太简单了，找不到教程</strong></p>
<p><a href="https://blog.csdn.net/qq_73805125/article/details/130659347?ops_request_misc=%7B%22request_id%22:%22169683556316800215058913%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=169683556316800215058913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-130659347-null-null.142%5Ev95%5EchatgptT3_1&utm_term=gitee%E8%B4%A6%E5%8F%B7%E5%88%9B%E5%BB%BA%E5%92%8C%E4%BB%93%E5%BA%93%E5%88%9B%E5%BB%BA&spm=1018.2226.3001.4187">怎么在Gitee中创建仓库</a></p>
<h3 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h3><p><strong>第一步</strong>：初始化git</p>
<p>在需要git管理的项目文件夹中执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<p><img src="/2023/10/09/git/init.jpg" alt="init"></p>
<p>再执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">la</span><br></pre></td></tr></table></figure>

<p>就可以看见<code>.git</code>文件夹，证明初始化成功</p>
<p><img src="/2023/10/09/git/la.jpg" alt="la"></p>
<p><strong>第二步</strong>：生成公钥以连接远程git仓库</p>
<p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的gitee账号的主邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>如果之前执行过，或者连过远程仓库，那么会报错说已经有了密钥</p>
<p><img src="/2023/10/09/git/key_already_exists.jpg" alt="error"></p>
<p>如果没有过，那么<strong>注意</strong>：命令行会问你三个问题，别搭理他，直接回车让他尴尬就好了。之后会出现如图所示的奇怪图像</p>
<p><img src="/2023/10/09/git/key_ok.jpg" alt="key_succeed"></p>
<p>然后去<code>/root/.ssh</code>下找到三个文件：<code>id_rsa</code>、<code>id_rsa.pub</code>和<code>known_hosts</code>。其中<code>id_rsa</code>是私钥，注意藏好，不要外泄；<code>id_rsa.pub</code>就是公钥，这个就有大用了。</p>
<p>点开<code>id_rsa.pub</code>文件，将里面的东西全都复制（<code>ctrl + a</code> 全选，然后复制），打开你的<code>gitee</code>网站，点击你自己的可可爱爱的头像，找到设置，点击设置</p>
<p><img src="/2023/10/09/git/click_setting.jpg" alt="click_setting"></p>
<p>然后点击SSH公钥，输入标题，然后在公钥一栏种中粘贴刚刚复制的一堆东西</p>
<p><img src="/2023/10/09/git/add_pub_key.jpg" alt="add_pub_key"></p>
<p>确定然后验证密码，就好了</p>
<p><strong>如果是之前有公钥的，可能会显示已经添加过，可以直接对仓库进行读写，可以直接忽略，问题不大</strong></p>
<p><strong>第三步</strong>：建立账号连接</p>
<p>直接在命令行输入以下指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@git.oschina.net</span><br></pre></td></tr></table></figure>

<p>然后会显示啥呢？ 会和你问好，说你成功变成了作者balabala的，人还怪有礼貌的嘞！</p>
<p><img src="/2023/10/09/git/successfully.jpg" alt="successfully"></p>
<p>至此，就可以连接上你的**<code>gitee</code>账号<strong>了，但是！！！！</strong>仅仅是连接到了你的gitee账号，而非仓库**，你还不能像高手一样<code>clone</code>、<code>push</code>和<code>pull</code>。</p>
<p><strong>第四步</strong>：连接仓库，芜湖！</p>
<p>打开网页，进入你开头新建的仓库看右边有个<code>克隆/下载</code>的明显的按钮，点击，选择<code>http</code>然后点击复制，这样就把这个仓库的网址复制下来了（其实点击SSH也行）</p>
<p>然后在切回命令行那边（<strong>注意，我们一直是在你需要用<code>git</code>管理的文件路径下操作的</strong>）输入以下指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin 你刚刚复制的url地址</span><br></pre></td></tr></table></figure>

<p>然后检查一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/09/git/git_remote_-v.jpg" alt="git_remote_-v"></p>
<p>出现这个就是成功了！</p>
<blockquote>
<p>解释一下，其中origin不是一个指令参数，是一个别名，就是在之后的push和pull中，你的origin就代表着你的仓库的地址，也可以设计别的名字，比如小猫，小狗，大逼兜等等，当然最好是英文。</p>
</blockquote>
<p><strong>第五步</strong>：愉快地上传代码</p>
<p>终于来到了经典的<code>push</code>三连了！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;message&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>第一条：将需要push的代码加载到工作区（本地）<code>.</code>的意思是本级目录下所有文件，也可以换成文件名或者路径</p>
<p>第二条：提交，但也是提交到本地，<code>message</code> 是你提交时候的备注，可以简要说明你做了啥，中英文都可以</p>
<p>第三条：将本地的东西全都<code>push</code>到远程仓库去，就是<code>gitee</code>上你创建的仓库。</p>
<blockquote>
<p>如果出现报错说你仓库有东西，两种解决方法</p>
<p><img src="/2023/10/09/git/push_error.jpg"></p>
<p>①先将仓库里的东西clone下来，修改后成你想要的之后再push上去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone origin</span><br></pre></td></tr></table></figure>

<p>②如果仓库的东西不要，直接在<code>gitee</code>网站上清空仓库（<strong>慎重</strong>）然后再<code>push</code>上去</p>
</blockquote>
<p><img src="/2023/10/09/git/push_succeed.jpg"></p>
<p>出现上图就是成功了。</p>
<p>再去<code>gitee</code>上看，代码也成功push上去了！</p>
<h3 id="圆满！！"><a href="#圆满！！" class="headerlink" title="圆满！！"></a>圆满！！</h3><p>PS:第一次push的时候会让你登录<code>gitee</code>，需要输入用户名和密码；用户名就是<code>gitee</code>的用户名,密码就是<code>gitee</code>账户的密码</p>
<p>如果之后每次提交都需要重复上述操作，挺烦的，那么就可以打开你项目文件夹的<code>.git/config</code>文件，<code>.get</code>就是开头说的那个文件夹。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[remote &quot;origin]</span><br><span class="line">url = https://gitee啥啥啥的</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">[remote &quot;origin]</span><br><span class="line">url = https://用户名:密码@gitee啥啥啥的</span><br></pre></td></tr></table></figure>

<p><strong>注意：以上所有符号用英文！</strong></p>
<p>END</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>OCR</title>
    <url>/2023/09/17/OCR/</url>
    <content><![CDATA[<h1 id="初探OCR图片文字识别技术"><a href="#初探OCR图片文字识别技术" class="headerlink" title="初探OCR图片文字识别技术"></a>初探OCR图片文字识别技术</h1><span id="more"></span>

<p>图片文字识别 是 从一幅图片中通过一些算法，将图片中的文字识别提取出来。</p>
<p>通常图片中文字的检测分为比较简单的场景和比较复杂的场景</p>
<p><img src="/2023/09/17/OCR/%E7%AE%80%E5%8D%95%E5%9C%BA%E6%99%AF%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB.jpg" alt="简单场景文字识别"></p>
<p>简单场景文字识别</p>
<p><img src="/2023/09/17/OCR/%E5%A4%8D%E6%9D%82%E5%9C%BA%E6%99%AF%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB.jpg" alt="复杂背景文字识别"></p>
<p>复杂场景文字识别</p>
<p>对于简单场景文字识别，可以使用比较简单的两种方法：<strong>形态学操作法</strong> 和 <strong>MSER+NMS</strong>。</p>
<p>对于复杂场景的文字识别，则有<strong>CTPN</strong>、<strong>Seglink</strong> 和 <strong>EAST</strong> 三种主流方法。</p>
<h3 id="形态学操作法"><a href="#形态学操作法" class="headerlink" title="形态学操作法"></a>形态学操作法</h3><p>①先将图片灰度化，及转换为灰度图</p>
<p>②将图片降噪后进行二值化</p>
<p><img src="/2023/09/17/OCR/%E4%BA%8C%E5%80%BC%E5%8C%96%E5%90%8E.jpg"></p>
<p>③通过膨胀，腐蚀等方法突出文本框范围</p>
<p><img src="/2023/09/17/OCR/%E8%86%A8%E8%83%80%E5%90%8E.jpg" alt="膨胀后的图片"></p>
<p>④进行可信度分析，即判断哪些范围是不属于文本的</p>
<p>⑤得到文本范围的坐标</p>
<p><img src="/2023/09/17/OCR/%E5%9D%90%E6%A0%87.jpg"></p>
<h3 id="MSER-NMS"><a href="#MSER-NMS" class="headerlink" title="MSER+NMS"></a>MSER+NMS</h3>]]></content>
      <categories>
        <category>OCR</category>
      </categories>
      <tags>
        <tag>OCR</tag>
      </tags>
  </entry>
  <entry>
    <title>Class about Java and Qt</title>
    <url>/2023/07/21/Class%20about%20Java%20and%20Qt/</url>
    <content><![CDATA[<h1 id="This-is-a-passage-of-something-about-Qt-coding"><a href="#This-is-a-passage-of-something-about-Qt-coding" class="headerlink" title="This is a passage of something about Qt coding"></a>This is a passage of something about Qt coding</h1><span id="more"></span>

<h3 id="基于c-的Qt"><a href="#基于c-的Qt" class="headerlink" title="基于c++的Qt"></a>基于<code>c++</code>的<code>Qt</code></h3><p>在<code>Qt creator</code>中做<code>Qt</code>开发是基于<code>C++</code>的<code>Qt</code>开发，也即一种面向对象的<code>Qt</code>开发。</p>
<p>我是只学过<code>Java</code>，没学过<code>C++</code>的，于是与<code>Java</code>语言类比，发现了诸多类似与一些不同。</p>
<h3 id="关于Qt中的类"><a href="#关于Qt中的类" class="headerlink" title="关于Qt中的类"></a>关于<code>Qt</code>中的类</h3><p>在<code>Java</code>中，一个类可以拆解成（我所认为的）这么几部分：类名，成员变量和成员函数。</p>
<p>类名自然不用多说，切在类名后还可以实现继承和接口相关一些功能；成员变量和成员函数一起被一对<code>&#123;&#125;</code>包裹在类中。一般是先声明成员变量，再根据它们设计函数。</p>
<p>而在Qt中，需要在头文件中定义成员变量和声明成员函数，同时定义它们的作用范围，如下代码所示</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mainWidget.h 文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mybutton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PADDING 2</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; UP=<span class="number">0</span>, DOWN=<span class="number">1</span>, LEFT, RIGHT, LEFTTOP, LEFTBOTTOM, RIGHTBOTTOM, RIGHTTOP, NONE &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">Widget</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mainWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">mainWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">mainWidget</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">region</span><span class="params">(<span class="type">const</span> QPoint &amp;currentGlobalPoint)</span></span>;  <span class="comment">//鼠标的位置,改变光标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    QPoint m_movePoint;  <span class="comment">//鼠标的位置</span></span><br><span class="line">    <span class="type">bool</span> isLeftPressDown;  <span class="comment">// 判断左键是否按下</span></span><br><span class="line">    Direction dir;        <span class="comment">// 窗口大小改变时，记录改变方向</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//鼠标按下移动及释放事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWIDGET_H</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而成员函数的实现则在对应的<code>.cpp</code>文件中实现。</p>
<p>刚开始学<code>Qt</code>的时候，看到教程在不停的换文件编辑，觉得非常乱，了解这一点之后可以很清楚的知道什么内容要到什么文件中去编辑。</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>python</title>
    <url>/2023/06/21/python/</url>
    <content><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><span id="more"></span>

<h3 id="python-安装环境"><a href="#python-安装环境" class="headerlink" title="python 安装环境"></a>python 安装环境</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/python-3.9.7-amd64.exe">python-3.9.7-amd64.exe</a></p>
<p>END</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>class17</title>
    <url>/2023/06/19/class17/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bec65e1f13de59763c066c00d2ba7e0320a2fe1298f896e00e27ee259c6cd4f1">042a9b5b09e3698fdc064d0eabb03174650f126803ba299425c6b1285a372b3b635c9b1093d087fb6abf3c04cca7c68e10c7dbe9d493bd51d500650489b430507616d4490cfa32abae95cc6baa570f300c10e84172f08cebedd1b0a692b6044ba09d0aa6b9e0f35ae6279f9ccb52ac914d6ae13023ce205a7622684227be473f9d8e0ecce6c15f59e3e05ff5041c393c2cf6cedbac9aedfd49a20879b5f1f4e90706b7e256388e224e6a5e6cc4f03206728a95f9ec68f6ade44666bb1f27c6aa97540549fd030c632834d029c0c61af3c96fdf268a80f0254bc6dc3bd58b54da2e4da22dc8604254684c328c9844ee88b62627de78485e237e1194868e42d0e94b7183240dfe380ff2dde7cb4e6bdc16f130c62a4fe49dfc020eda05da7399755a94f66bdb9ad2b7e16be1eee425555ec71ea037704124498d51102453476d69ab7cab9f39845e103a8f375abfe6d4bc75aedaa78bfa970af7be003447a6c8cee60ef5b28b235cb32016392f97ad56d99f13e55398bf4ce1ebdd339f097fec8a1d1389b504a1c575a82665eab04d2aafd2d87eb682da6ff5e68f9f06a27e66ecdde47a86496920a6c5545439f2c087d230a96b26eb986f51f3144f76dfb9ee28f512bb3fff2e9814a1294df17d5869c691c951855f1b733e9100d43ac86a1978378397e84ef66236ddfd5de30ff75007</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>高三17班</category>
      </categories>
      <tags>
        <tag>高三17班</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机指令解释</title>
    <url>/2023/06/01/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h1 id="简易编译器中的虚拟机指令解释"><a href="#简易编译器中的虚拟机指令解释" class="headerlink" title="简易编译器中的虚拟机指令解释"></a>简易编译器中的虚拟机指令解释</h1><span id="more"></span>

<h3 id="代码前定义"><a href="#代码前定义" class="headerlink" title="代码前定义"></a>代码前定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *src, *old_src;</span><br><span class="line"><span class="type">int</span> *bp, *sp, *pc; </span><br><span class="line"><span class="type">int</span> ax = <span class="number">0</span>; </span><br></pre></td></tr></table></figure>



<h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> //枚举</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LEA,IMM,JMP,CALL,JZ,JNZ,ENT,ADJ,LEV,LI,LC,SI,SC,PUSH,OR,XOR,AND,EQ,NE,LT,GT,LE,GE,SHL,SHR,ADD,SUB,MUL,DIV,MOD,OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="IMM"><a href="#IMM" class="headerlink" title="IMM"></a>IMM</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (op == IMM)</span><br><span class="line">&#123;</span><br><span class="line">	ax = *pc++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>IMM</code>指令用于将一个<code>数</code>存放在寄存器<code>ax</code>中。</p>
<p>其中<code>数</code>不一定是1，2，3，4等，可以是其它不同含义的数字，比如十六进制的<code>0xE4BDA0</code>在<code>utf-8</code>中表示中文字符<code>你</code>，也可以当作一个数存进寄存器<code>ax</code>中。</p>
<p><code>pc</code>指向的是下一个指令的地址，地址本质上也是一个数，即可以存储到寄存器<code>ax</code>中。</p>
<h3 id="LC"><a href="#LC" class="headerlink" title="LC"></a>LC</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == LC)</span><br><span class="line">&#123;</span><br><span class="line">	ax = *(<span class="type">char</span> *)ax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>LC</code>指令用于将对应地址中的字符载入<code>ax</code>中。</p>
<p>执行指令前，<code>ax</code>中存放的是地址，一如IMM指令中所述，将该地址存放在<code>ax</code>中。现将<code>ax</code>中的地址强转为 <code>char *</code> （因为<code>ax</code>是<code>int</code>型） ，强转为<code>char * </code>只是告诉编译器，我下一次要取<code>ax</code>地址中对应的内容时，按照<code>char</code>的解析规则去解析，即随即而来的解引用操作，将<code>ax</code>中的地址值指向的内容，按照<code>char</code>的规则解析后，将其的编码（若是字母，则应该是ASCII码，如果是其它的字符，则是按照编码规则来存储的一些十六进制的码）存入<code>ax</code>中。</p>
<h3 id="LI"><a href="#LI" class="headerlink" title="LI"></a>LI</h3><p><code>LI</code>指令用于将对应地址中的整数载入<code>ax</code>中，和<code>LC</code>类似</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == LI)</span><br><span class="line">&#123;</span><br><span class="line">    ax = *(<span class="type">int</span> *)ax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == SC)</span><br><span class="line">&#123;</span><br><span class="line">	ax = *(<span class="type">char</span> *)*sp++ = ax;<span class="comment">//sp++是压栈？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SC</code>指令用于将<code>ax</code>中的数据作为字符存放，且存放在栈顶。</p>
<p>首先POP一下，即<code>sp++</code>，然后将<code>ax</code>存放在<code>sp</code>指向的内存中。完成之后，将该地址强转为 <code>char *</code>类型，之后再按照<code>char</code>的规则取该地址中的内容，然后存入<code>ax</code>中。</p>
<p>简而言之，先将<code>ax</code>中的数存入<code>sp</code>栈顶中，然后将它转换成<code>char</code>类型，再更新<code>ax</code>中的值。</p>
<p>其实可以写成这样：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == SC)</span><br><span class="line">&#123;</span><br><span class="line">    *sp++ = ax;</span><br><span class="line">    ax = *(<span class="type">char</span> *)*sp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SI"><a href="#SI" class="headerlink" title="SI"></a>SI</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == SI)</span><br><span class="line">&#123;</span><br><span class="line">	*(<span class="type">int</span> *)*sp++ = ax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与<code>SC</code>类似，但是 是将<code>ax</code>中的数据以整数的形式重新存入<code>ax</code>中</p>
<h3 id="PUSH"><a href="#PUSH" class="headerlink" title="PUSH"></a>PUSH</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == PUSH)</span><br><span class="line">&#123;</span><br><span class="line">	*--sp = ax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PUSH</code>即为压栈，先开辟空间，即sp向下走一位，然后将<code>ax</code>的值写进去</p>
<h3 id="JMP"><a href="#JMP" class="headerlink" title="JMP"></a>JMP</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == JMP)</span><br><span class="line">&#123;</span><br><span class="line">	pc = (<span class="type">int</span> *)*pc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>JMP</code>的作用是跳转，即将<code>pc</code>指向的地址中的值改为下一块语句的地址。</p>
<blockquote>
<p><strong>注意</strong></p>
<p><code>JMP</code>是跳转到下一块，因为这是跳转，而不是按照顺序继续执行，中间必然是跳跃的一些代码的</p>
<p>若需要按顺序执行下一条语句，直接<code>pc++</code>就可以事项，在<code>JZ</code>和<code>JNZ</code>指令中有体现</p>
</blockquote>
<p><code>pc</code>中存放的是<strong>下一条指令的地址的地址</strong>，该操作是将下一条指令的地址直接赋给<code>pc</code>并以<code>int</code>规则解析该地址（因为<code>pc</code>本来就是<code>int *</code>类型）</p>
<h3 id="JZ"><a href="#JZ" class="headerlink" title="JZ"></a>JZ</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == JZ)</span><br><span class="line">&#123;</span><br><span class="line">	pc = ax ? pc + <span class="number">1</span> : (<span class="type">int</span> *)*pc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>JZ</code>：jump if ax is zero</p>
<p>即当<code>ax</code>为0时，使用<code>JZ</code>跳转到<code>(int *)*pc</code></p>
<h3 id="JNZ"><a href="#JNZ" class="headerlink" title="JNZ"></a>JNZ</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == JNZ)</span><br><span class="line">&#123;</span><br><span class="line">	pc = ax ? (<span class="type">int</span> *)*pc : pc + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>JNZ</code>：jump if ax is not zero</p>
<p>即当<code>ax</code>不为0时，使用<code>JNZ</code>跳转到<code>(int *)*pc</code></p>
<h3 id="CALL"><a href="#CALL" class="headerlink" title="CALL"></a>CALL</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == CALL)</span><br><span class="line">&#123;</span><br><span class="line">	sp--;</span><br><span class="line">	*sp = (<span class="type">int</span>)(pc + <span class="number">1</span>);</span><br><span class="line">	pc = (<span class="type">int</span> *)*pc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>CALL</code>用于调用子函数。</p>
<p>先将栈开辟一块空间，然后将顺序的下一句存进栈顶，然后实现一次<code>JMP</code>，跳转到子函数的地址。</p>
<blockquote>
<p>将顺序的下一句存入栈中，是因为等子函数执行完了之后，需要回过头来继续执行main函数</p>
</blockquote>
<h3 id="ENT"><a href="#ENT" class="headerlink" title="ENT"></a>ENT</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == ENT)</span><br><span class="line">&#123;</span><br><span class="line">	*--sp = (<span class="type">int</span>)bp;</span><br><span class="line">	bp = sp;</span><br><span class="line">	sp = sp - *pc++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ENT</code>用于保存当前栈指针，然后分配一定空间给子函数运行</p>
<p>先调用基址指针<code>bp</code>来帮忙代替一下<code>sp</code>的工作：总是指向栈顶。在这之前需要在栈中保存基址指针指向的地址，即先分配空间保存<code>bp</code>的指向内容，然后将<code>sp</code>的值赋给<code>bp</code>，然后<code>sp</code>划分<code>*pc++</code>个空间给子函数运行。</p>
<blockquote>
<p><code>pc++</code>是<code>CALL</code>之后<code>pc</code>的顺序的下一个指令地址，里面存储了该函数需要多少空间才能保证顺利运行，所以编译器可以直接按照这个数字给子函数开辟内存</p>
</blockquote>
<h3 id="ADJ"><a href="#ADJ" class="headerlink" title="ADJ"></a>ADJ</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == ADJ)</span><br><span class="line">&#123;</span><br><span class="line">	sp = sp + *pc++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ADJ</code>函数用于回收给子函数分配的空间。</p>
<h3 id="LEV"><a href="#LEV" class="headerlink" title="LEV"></a>LEV</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == LEV)</span><br><span class="line">&#123;</span><br><span class="line">	sp = bp;</span><br><span class="line">	bp = (<span class="type">int</span> *)*sp++;</span><br><span class="line">	pc = (<span class="type">int</span> *)*sp++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>LEV</code>用于恢复没调用函数时的main函数的现场。</p>
<p>在<code>CALL</code>指令中，将顺序执行的下一条语句地址暂存，在<code>ENT</code>指令中，将基址指针<code>bp</code>的指向地址暂存，然后<code>bp</code>代替<code>sp</code>先指一会儿栈顶。</p>
<p>所以先将栈顶指针还给<code>sp</code>，然后带<code>bp</code>去找它之前指向的地址，然后把存该地址的空间消灭，接着就带<code>pc</code>去找顺序下一条语句的地址（因为中间插入的函数已经解决了），然后再将该空间消灭。</p>
<blockquote>
<p>先带<code>bp</code>，再带<code>pc</code>顺序不可乱，因为栈就是后进先出！！</p>
</blockquote>
<h3 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == LEA)</span><br><span class="line">&#123;</span><br><span class="line">	ax = (<span class="type">int</span>)(bp + *pc++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>LEA</code>指令用于取函数参数。</p>
<p><code>CALL</code>指令执行后，跳转至子函数执行，此时需要取子函数的参数。子函数的参数位置由基址指针<code>bp</code>和偏移量<code>*pc</code>决定，取完之后，将其存放到寄存器<code>ax</code>中</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>①在<code>JZ</code>和<code>JNZ</code>中，已经确定了两种情况下的<code>ax</code>为什么还需要用三目操作符来判断<code>ax</code>的值并给出相应的操作，且不管<code>ax</code>是否为0，结果都是一样的，即进行一次<code>JMP</code></p>
<p>②在<code>ENT</code>和<code>ADJ</code>中都涉及到了<code>*pc++</code>这个数值，但是在<code>ENT</code>分配的时候就已经调用了<code>*pc++</code>，理论上<code>pc</code>已经不再指向该函数需要的运行空间了，为什么在<code>ADJ</code>中还可以继续用<code>*pc++</code>来回收空间，此时的<code>pc</code>不应该指向其他值吗？</p>
]]></content>
      <categories>
        <category>编译</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2023/06/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><span id="more"></span>



<h3 id="关于操作系统课程教材《Linux编程》中代码不能正常编译问题解释："><a href="#关于操作系统课程教材《Linux编程》中代码不能正常编译问题解释：" class="headerlink" title="关于操作系统课程教材《Linux编程》中代码不能正常编译问题解释："></a>关于操作系统课程教材《Linux编程》中代码不能正常编译问题解释：</h3><p>书中大部分代码使用头文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;wrapper.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>在文件<code>wrapper.h</code>中，作者引用了大量的其他头文件，以及其他函数和作者对此书适应的定义，若没有该文件，此书中的很多代码编译运行的体验感不好。因此这里给出<code>wrapper.h</code>文件内容，及其使用方法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* $begin wrapper.h */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __WRAPPER_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WRAPPER_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Default file permissions are DEF_MODE &amp; ~DEF_UMASK */</span></span><br><span class="line"><span class="comment">/* $begin createmasks */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF_MODE   S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF_UMASK  S_IWGRP|S_IWOTH</span></span><br><span class="line"><span class="comment">/* $end createmasks */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Simplifies calls to bind(), connect(), and accept() */</span></span><br><span class="line"><span class="comment">/* $begin sockaddrdef */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">SA</span>;</span></span><br><span class="line"><span class="comment">/* $end sockaddrdef */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Persistent state for the robust I/O (Rio) package */</span></span><br><span class="line"><span class="comment">/* $begin rio_t */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RIO_BUFSIZE 8192</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> rio_fd;                <span class="comment">/* descriptor for this internal buf */</span></span><br><span class="line">    <span class="type">int</span> rio_cnt;               <span class="comment">/* unread bytes in internal buf */</span></span><br><span class="line">    <span class="type">char</span> *rio_bufptr;          <span class="comment">/* next unread byte in internal buf */</span></span><br><span class="line">    <span class="type">char</span> rio_buf[RIO_BUFSIZE]; <span class="comment">/* internal buffer */</span></span><br><span class="line">&#125; <span class="type">rio_t</span>;</span><br><span class="line"><span class="comment">/* $end rio_t */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  semaphore buffer structure */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">               <span class="type">int</span>              val;    <span class="comment">/* Value for SETVAL */</span></span><br><span class="line">               <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span>    <span class="comment">/* Buffer for IPC_STAT, IPC_SET */</span></span><br><span class="line">               <span class="type">unsigned</span> <span class="type">short</span>  *<span class="built_in">array</span>;  <span class="comment">/* Array for GETALL, SETALL */</span></span><br><span class="line">               <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span>  *__<span class="title">buf</span>;</span>  <span class="comment">/* Buffer for IPC_INFO</span></span><br><span class="line"><span class="comment">                                           (Linux-specific) */</span></span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* External variables */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> h_errno;    <span class="comment">/* defined by BIND for DNS errors */</span> </span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **environ; <span class="comment">/* defined by libc */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Misc constants */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	MAXLINE	 8192  <span class="comment">/* max text line length */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXBUF   8192  <span class="comment">/* max I/O buffer size */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTENQ  1024  <span class="comment">/* second argument to listen() */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Our own error-handling functions */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ux_error</span><span class="params">(<span class="type">char</span> *msg)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">posix_error</span><span class="params">(<span class="type">int</span> code, <span class="type">char</span> *msg)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dns_error</span><span class="params">(<span class="type">char</span> *msg)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">app_error</span><span class="params">(<span class="type">char</span> *msg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Process control wrappers */</span></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">Fork</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">char</span> *<span class="type">const</span> argv[], <span class="type">char</span> *<span class="type">const</span> envp[])</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">Wait</span><span class="params">(<span class="type">int</span> *status)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">Waitpid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> *iptr, <span class="type">int</span> options)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Kill</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> signum)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">Sleep</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> secs)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Pause</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">Alarm</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Setpgid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">pid_t</span> pgid)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">Getpgrp</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Signal wrappers */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> <span class="title function_">handler_t</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">handler_t</span> *<span class="title function_">Signal</span><span class="params">(<span class="type">int</span> signum, <span class="type">handler_t</span> *handler)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Sigprocmask</span><span class="params">(<span class="type">int</span> how, <span class="type">const</span> <span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">sigset_t</span> *oldset)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Sigemptyset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Sigfillset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Sigaddset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Sigdelset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Sigismember</span><span class="params">(<span class="type">const</span> <span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Unix I/O wrappers */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span>;</span><br><span class="line"><span class="comment">//#define Open(pathname, flags) Open(pathname, flags, 0666)</span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">Read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">Write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line"><span class="type">off_t</span> <span class="title function_">Lseek</span><span class="params">(<span class="type">int</span> fildes, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Select</span><span class="params">(<span class="type">int</span>  n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, </span></span><br><span class="line"><span class="params">	   <span class="keyword">struct</span> timeval *timeout)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Dup2</span><span class="params">(<span class="type">int</span> fd1, <span class="type">int</span> fd2)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="keyword">struct</span> stat *buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Fstat</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> stat *buf)</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Memory mapping wrappers */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">Mmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fd, <span class="type">off_t</span> offset)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Munmap</span><span class="params">(<span class="type">void</span> *start, <span class="type">size_t</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Standard I/O wrappers */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Fclose</span><span class="params">(FILE *fp)</span>;</span><br><span class="line">FILE *<span class="title function_">Fdopen</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> *type)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">Fgets</span><span class="params">(<span class="type">char</span> *ptr, <span class="type">int</span> n, FILE *stream)</span>;</span><br><span class="line">FILE *<span class="title function_">Fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, FILE *stream)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">Fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Dynamic storage allocation wrappers */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">Malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">Realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">Calloc</span><span class="params">(<span class="type">size_t</span> nmemb, <span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Free</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Sockets interface wrappers */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Setsockopt</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> level, <span class="type">int</span> optname, <span class="type">const</span> <span class="type">void</span> *optval, <span class="type">int</span> optlen)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Bind</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *my_addr, <span class="type">int</span> addrlen)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Listen</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> backlog)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Accept</span><span class="params">(<span class="type">int</span> s, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Connect</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *serv_addr, <span class="type">int</span> addrlen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DNS wrappers */</span></span><br><span class="line"><span class="keyword">struct</span> hostent *<span class="title function_">Gethostbyname</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="keyword">struct</span> hostent *<span class="title function_">Gethostbyaddr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *addr, <span class="type">int</span> len, <span class="type">int</span> type)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Pthreads thread control wrappers */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_create</span><span class="params">(<span class="type">pthread_t</span> *tidp, <span class="type">pthread_attr_t</span> *attrp, </span></span><br><span class="line"><span class="params">		    <span class="type">void</span> * (*routine)(<span class="type">void</span> *), <span class="type">void</span> *argp)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_join</span><span class="params">(<span class="type">pthread_t</span> tid, <span class="type">void</span> **thread_return)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_cancel</span><span class="params">(<span class="type">pthread_t</span> tid)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_detach</span><span class="params">(<span class="type">pthread_t</span> tid)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_exit</span><span class="params">(<span class="type">void</span> *retval)</span>;</span><br><span class="line"><span class="type">pthread_t</span> <span class="title function_">Pthread_self</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_once</span><span class="params">(<span class="type">pthread_once_t</span> *once_control, <span class="type">void</span> (*init_function)())</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* POSIX semaphore wrappers */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Sem_init</span><span class="params">(<span class="type">sem_t</span> *sem, <span class="type">int</span> pshared, <span class="type">unsigned</span> <span class="type">int</span> value)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">P</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">V</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Rio (Robust I/O) package */</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">rio_readn</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *usrbuf, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">rio_writen</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *usrbuf, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rio_readinitb</span><span class="params">(<span class="type">rio_t</span> *rp, <span class="type">int</span> fd)</span>; </span><br><span class="line"><span class="type">ssize_t</span>	<span class="title function_">rio_readnb</span><span class="params">(<span class="type">rio_t</span> *rp, <span class="type">void</span> *usrbuf, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="type">ssize_t</span>	<span class="title function_">rio_readlineb</span><span class="params">(<span class="type">rio_t</span> *rp, <span class="type">void</span> *usrbuf, <span class="type">size_t</span> maxlen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrappers for Rio package */</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">Rio_readn</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *usrbuf, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Rio_writen</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *usrbuf, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Rio_readinitb</span><span class="params">(<span class="type">rio_t</span> *rp, <span class="type">int</span> fd)</span>; </span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">Rio_readnb</span><span class="params">(<span class="type">rio_t</span> *rp, <span class="type">void</span> *usrbuf, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">Rio_readlineb</span><span class="params">(<span class="type">rio_t</span> *rp, <span class="type">void</span> *usrbuf, <span class="type">size_t</span> maxlen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Client/server helper functions */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">open_client_sock</span><span class="params">(<span class="type">char</span> *hostname, <span class="type">int</span> portno)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">open_listen_sock</span><span class="params">(<span class="type">int</span> portno)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrappers for client/server helper functions */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Open_client_sock</span><span class="params">(<span class="type">char</span> *hostname, <span class="type">int</span> port)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Open_listen_sock</span><span class="params">(<span class="type">int</span> port)</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* Wrappers for System V IPC functions */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Msgctl</span><span class="params">(<span class="type">int</span> msqid, <span class="type">int</span> cmd, <span class="keyword">struct</span> msqid_ds *buf)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Msgget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">int</span> msgflg)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Msgrcv</span><span class="params">(<span class="type">int</span> maqid, <span class="type">void</span> *msg_ptr, <span class="type">size_t</span> msg_sz, <span class="type">long</span> <span class="type">int</span> msgtype, <span class="type">int</span> msgflg)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Msgsnd</span><span class="params">(<span class="type">int</span> msqid, <span class="type">const</span> <span class="type">void</span> *msg_ptr, <span class="type">size_t</span> msg_sz, <span class="type">int</span> msgflg)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Shmget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">size_t</span> size, <span class="type">int</span> shmflg)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">Shmat</span><span class="params">(<span class="type">int</span> shmid, <span class="type">const</span> <span class="type">void</span> *shmaddr, <span class="type">int</span> shmflg)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Shmctl</span><span class="params">(<span class="type">int</span> shm_id, <span class="type">int</span> cmd, <span class="keyword">struct</span> shmid_ds *buf )</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Shmdt</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *shmaddr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Semget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">int</span> nsems, <span class="type">int</span> semflg)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Semctl</span><span class="params">(<span class="type">int</span> semid, <span class="type">int</span> semnum, <span class="type">int</span> cmd, <span class="keyword">union</span> semun arg)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Semop</span><span class="params">(<span class="type">int</span> semid, <span class="keyword">struct</span> sembuf *sem, <span class="type">int</span> sops)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Mkfifo</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">mode_t</span> mode)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __WRAPPER_H__ */</span></span></span><br><span class="line"><span class="comment">/* $end wrapper.h */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>大家可以直接在文件夹中创建文件<code>wrapper.h</code>,然后编译。</p>
<p>如果此方法发不行，那么，按照下面方法来：</p>
<p>①下载附件：<a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/wrapper.zip">wrapper.h解决办法</a></p>
<p>②将附件中的除使用说明文件以外的四个文件复制，放入和需要该头文件的代码同一文件夹内。</p>
<p>③按照使用说明文件中的说明操作：</p>
<p>​	先执行下列命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">rm libwrapper.a</span><br><span class="line">gcc  -c    wrapper.c  ptwrapper.c</span><br><span class="line">ar  rc  libwrapper.a  wrapper.o  ptwrapper.o</span><br></pre></td></tr></table></figure>

<p>​	都正常执行后，既可以编译需要编译的文件，编译文件时使用如下命令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc yourfile.c -o yourfilename -L. -lwrapper</span><br></pre></td></tr></table></figure>

<p>​	既可以成功编译，生成二进制文件</p>
<h3 id="下面是实验时间！"><a href="#下面是实验时间！" class="headerlink" title="下面是实验时间！"></a>下面是实验时间！</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%88%E6%97%A0%E9%80%89%E5%81%9A%EF%BC%89.tar">lab4:进程间通信(无选做)</a></p>
<p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/pihaoxuan_2021428010127_05.tar.zip">lab5:网络通信源代码</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2023/05/30/Vue/</url>
    <content><![CDATA[<h1 id="Vue前端开发"><a href="#Vue前端开发" class="headerlink" title="Vue前端开发"></a>Vue前端开发</h1><span id="more"></span>

<h3 id="实验三：投票系统的实现"><a href="#实验三：投票系统的实现" class="headerlink" title="实验三：投票系统的实现"></a>实验三：投票系统的实现</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/Vue-lab3-vote-system.zip">实验三：投票系统的实现（npm组件工程项目）</a></p>
]]></content>
      <categories>
        <category>Vue前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>数据库原理</title>
    <url>/2023/05/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="数据库系统原理实验-amp-amp-作业"><a href="#数据库系统原理实验-amp-amp-作业" class="headerlink" title="数据库系统原理实验&amp;&amp;作业"></a>数据库系统原理实验&amp;&amp;作业</h2><span id="more"></span>



<h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A2%EF%BC%9A%E7%AC%AC%E4%B8%89%E7%AB%A0.docx">作业二：数据操作语言：SQL</a></p>
<p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E4%B8%89.docx">作业三：数据库安全性、数据库完整性</a></p>
<p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A5%EF%BC%9A%E7%AC%AC%E5%85%AB%E7%AB%A0%E7%AC%AC%E5%8D%81%E7%AB%A0.docx">作业五：数据库编程，并发控制与恢复</a></p>
<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E5%AD%A6%E7%94%9F%E9%80%89%E8%AF%BE%E6%88%90%E7%BB%A9-csv%E8%A1%A8%E6%A0%BC-%E5%8F%AF%E5%AF%BC%E5%85%A5workbanch.zip">前两次实验数据包，可直接导入workbanch</a></p>
<h3 id="数据库系统原理实训大作业"><a href="#数据库系统原理实训大作业" class="headerlink" title="数据库系统原理实训大作业"></a>数据库系统原理实训大作业</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E3%80%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%8B%E7%BB%BC%E5%90%88%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%AE%AD.zip">综合实训相关题目和实训报告</a></p>
<p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E9%9B%B6%E5%94%AE%E9%9B%86%E5%9B%A2%E5%95%86%E5%93%81%E9%87%87%E8%B4%AD-%E5%AE%9E%E8%AE%AD%E6%95%B0%E6%8D%AE%E5%8C%85%EF%BC%88%E8%87%AA%E5%88%B6%EF%BC%89.zip">零售集团商品采购数据包</a></p>
<p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E9%9B%B6%E5%94%AE%E9%9B%86%E5%9B%A2%E5%95%86%E5%93%81%E9%87%87%E8%B4%ADER%E5%9B%BE%EF%BC%88%E8%87%AA%E7%BB%98%EF%BC%89.jpg">零售集团商品采购ER图</a></p>
]]></content>
      <categories>
        <category>数据库系统原理</category>
      </categories>
  </entry>
  <entry>
    <title>关于C语言char读入中文</title>
    <url>/2023/05/28/%E5%85%B3%E4%BA%8EC%E8%AF%AD%E8%A8%80char%E8%AF%BB%E5%85%A5%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<h2 id="关于C语言char读入中文"><a href="#关于C语言char读入中文" class="headerlink" title="关于C语言char读入中文"></a>关于C语言char读入中文</h2><span id="more"></span>

<p>先上代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> token;</span><br><span class="line"><span class="type">char</span> *src;</span><br><span class="line"><span class="type">void</span> <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    token = *src++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上述代码所示，其中<code>token</code>是<code>int</code>类型，而<code>src</code>是<code>char</code>类型的指针，它所指向的内容只会取一个字节进行解析。</p>
<p>现在让<code>src</code>指向一个内存块，其存储的值是<code>0xE4BDA0</code>，即中文字符<code>你</code>的<code>utf-8</code>的编码，由于你的编码占了三个字节，而C语言中<code>char</code>类型只解析一个字节，因此，当<code>src</code>指向这个内存块的时候，只解析最低位，即<code>0xA0</code>。当讲0xA0赋值给token时，因为token是int类型，因此token会将最低位写入0xA0，其它位保持赋值时刷新的值。</p>
<blockquote>
<p>解释一下<code>保持赋值时刷新的值</code>是什么意思：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> k;</span><br><span class="line">k=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>如上述代码所示，k被赋值三，且之前没初始化，那么在赋值时，为了保证k 的正确，应该将对应的内存刷新成二进制</p>
<p><code>0000 0000 0000 0011</code>但是在计算机内部，整数是用补码存储的，因此在计算机中，真实的值应该是</p>
<p><code>0111 1111 1111 1101</code>因为k是int类型，不是无符号，所以第一位仍然是0，表示该数是正数。</p>
</blockquote>
<p>所以，在将0xA0赋值给int时，会经历这样一个过程：</p>
<blockquote>
<p>①判断0xA0在char中是负数：<code>1010 0000</code> 首位是1，判断为负数</p>
<p>②赋值时，计算机为了保证正确性，先将token定义为负数，即首位为1</p>
<p>③确定正负后，将值写入。</p>
</blockquote>
<p>所以token在计算机内部应该是 <code>1111 1111 1111 1010 0000</code> 这是补码形式，转换成真实值就是</p>
<p> <code>1000 0000 0000 0110 0000</code> 所以输出就是<code>-96</code>。</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><span id="more"></span>

<h3 id="计算机网络作业四：网络层"><a href="#计算机网络作业四：网络层" class="headerlink" title="计算机网络作业四：网络层"></a>计算机网络作业四：网络层</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E8%AE%A1%E7%BD%91%E4%BD%9C%E4%B8%9A4.pdf">戳我下载！！</a></p>
<h3 id="计算机网络实验四：网际控制报文协议ICMP分析"><a href="#计算机网络实验四：网际控制报文协议ICMP分析" class="headerlink" title="计算机网络实验四：网际控制报文协议ICMP分析"></a>计算机网络实验四：网际控制报文协议ICMP分析</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%9A%E7%BD%91%E9%99%85%E6%8E%A7%E5%88%B6%E6%8A%A5%E6%96%87%E5%8D%8F%E8%AE%AEICMP%E5%88%86%E6%9E%90.docx">怼我下载计网实验四：网际控制报文协议ICMP分析</a></p>
<h3 id="计算机网络作业五：传输层"><a href="#计算机网络作业五：传输层" class="headerlink" title="计算机网络作业五：传输层"></a>计算机网络作业五：传输层</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E8%AE%A1%E7%BD%91%E4%BD%9C%E4%B8%9A5.pdf">戳我下载！</a></p>
<h3 id="思政作业3"><a href="#思政作业3" class="headerlink" title="思政作业3"></a>思政作业3</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%9D%E6%94%BF%E4%BD%9C%E4%B8%9A3.docx">阅读参考《中国互联网络发展状况统计报告（第51次）》有关内容</a></p>
<h3 id="作业6：应用层"><a href="#作业6：应用层" class="headerlink" title="作业6：应用层"></a>作业6：应用层</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E4%BD%9C%E4%B8%9A6.pdf">作业6666666666：应用层</a></p>
<h3 id="实验六：超文本传送协议HTTP分析"><a href="#实验六：超文本传送协议HTTP分析" class="headerlink" title="实验六：超文本传送协议HTTP分析"></a>实验六：超文本传送协议HTTP分析</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E5%85%AD%EF%BC%9A%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E9%80%81%E5%8D%8F%E8%AE%AEHTTP%E5%88%86%E6%9E%90.docx">点我，解锁更多* * *%@#&amp;￥%！@￥%……@#￥</a></p>
<h3 id="实验七：web页面请求全历程协议及数据包解析"><a href="#实验七：web页面请求全历程协议及数据包解析" class="headerlink" title="实验七：web页面请求全历程协议及数据包解析"></a>实验七：web页面请求全历程协议及数据包解析</h3><p><a href="https://gitee.com/pi_haoxuan/pi_haoxuan/releases/download/downloadFile1.0/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E4%B8%83%EF%BC%9Aweb%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E5%85%A8%E5%8E%86%E7%A8%8B%E5%8D%8F%E8%AE%AE%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%8C%85%E8%A7%A3%E6%9E%90.docx">嘿 嘿嘿 嘿嘿嘿 你懂的</a></p>
<p>END</p>
]]></content>
      <categories>
        <category>计网作业</category>
      </categories>
  </entry>
  <entry>
    <title>C语言解释</title>
    <url>/2023/05/22/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<p>关于C语言中一些系统定义的解释</p>
<span id="more"></span>

<h3 id="perror-char"><a href="#perror-char" class="headerlink" title="perror( char )"></a>perror( char )</h3><blockquote>
<p>作用：输出错误信息</p>
<p>参数解释：传入字符串，例如<code>perror(&quot;upper&quot;)</code></p>
<p>标准输出：<code>upper: error message</code> 其中error message 是系统定义的错误信息</p>
<p>在写代码是可以适当使用该函数，用来调试程序，函数会指出错误原因</p>
</blockquote>
<h3 id="stderr"><a href="#stderr" class="headerlink" title="stderr"></a>stderr</h3><blockquote>
<p>作用：输出文件处理时候的错误信息</p>
<p>注意：这个不是函数，而是一个指针，类型为<code>FILE*</code>，作为<code>fprintf</code>中的第一个参数使用，后接错误信息</p>
<p><code>code01</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> err_code = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error occurred, error code is %d\n&quot;</span>, err_code);</span><br><span class="line">  <span class="keyword">return</span> err_code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>该参数只处理文件操作错误的信息</p>
</blockquote>
<h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><blockquote>
<p>作用：C语言中的一个关键词，用于修饰一个函数，放在函数返回类型前。</p>
<p>被修饰的函数称为“<code>内联函数</code>”，通常是一个小巧的，轻量级的函数，定量来看，一般不超过10行。</p>
<p>注意：函数中应该不包括<code>递归</code>、<code>循环</code>等“非轻量级”的操作，或者是一些本身就很复杂的库函数中的函数调用。</p>
<p>作为函数，肯定是常用的，才会封装成一个函数，使得代码简洁，但是这个<code>inline函数</code>看起来好像没啥实际上的作用，那为什么还要用这个关键词修饰呢？</p>
<p>深层内涵：<code>inline</code>函数在编译的时候，会出现在任何一个调用它的地方，并且以内容的形式出现，而不是以跳转地址的形式出现，即函数执行到了调用<code>inline</code>函数的时候，并不需要跳转寻址来另外开栈执行函数，然后再跳转回去继续执行；而是直接将函数内容嵌入调用<code>inline</code>函数的地方，让程序直接往下执行，举个例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> c = a+b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%D&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    add(a,b);</span><br><span class="line">    add(m,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个很简单的加法函数，在<code>main</code>函数中调用了<code>add</code>函数，但是在编译过后，它完全等价于下面的代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> c = a+b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span><br><span class="line">    <span class="type">int</span> d = m+n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即将函数以内容的方式呈现在<code>main</code>函数中，而不是以地址跳转的方式去调用函数。</p>
<p>好处：这样一个关键词的存在不仅满足了代码的简洁性和可读性，还可以增加代码的编译速度，在编译和执行的过程中不必另开空间去编译执行。但是如果<code>inline</code>修饰稍稍复杂一点的函数，那会导致汇编代码太长，反而减慢了编译执行的速度，适得其反。所以<code>inline</code>函数只能修饰轻量级函数，而不修饰复杂函数。简而言之<strong>复杂不了一点</strong>。</p>
</blockquote>
<h3 id="strcmp和strncmp"><a href="#strcmp和strncmp" class="headerlink" title="strcmp和strncmp"></a><code>strcmp</code>和<code>strncmp</code></h3><blockquote>
<p>共同点：两者都是比较两个字符串，判断<code>str2</code>是否存在于<code>str1</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcmp</span>(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncmp</span>(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2, <span class="type">size_t</span> n)</span><br></pre></td></tr></table></figure>

<p>可以看到<code>strncmp</code>多了一个参数<code>n</code>，用于限定比较字符的长度，在限定长度内如果相等，则返回<code>0</code>以表示相等，否则返回下标为<code>n</code>的两个字符串的差（str1[n] - str2[n]）</p>
<p>而<code>strcmp</code>是两个字符串全部相等才会返回<code>0</code></p>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2 = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="built_in">strcmp</span>(str1,str2); <span class="comment">//判断结果为不相等</span></span><br><span class="line"><span class="built_in">strncmp</span>(str1,str2,<span class="number">4</span>); <span class="comment">//判断结果为相等</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="stat结构体和stat函数"><a href="#stat结构体和stat函数" class="headerlink" title="stat结构体和stat函数"></a><code>stat</code>结构体和<code>stat</code>函数</h3><blockquote>
<p><code>stat</code>结构体：存储文件信息的一个结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">__dev_t</span> st_dev; <span class="comment">/* Device.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __x86_64__</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> <span class="type">int</span> __pad1;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined __x86_64__ || !defined __USE_FILE_OFFSET64</span></span><br><span class="line">    <span class="type">__ino_t</span> st_ino; <span class="comment">/* File serial number.	*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">__ino_t</span> __st_ino; <span class="comment">/* 32bit file serial number.	*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __x86_64__</span></span><br><span class="line">    <span class="type">__mode_t</span> st_mode;   <span class="comment">/* File mode.  */</span></span><br><span class="line">    <span class="type">__nlink_t</span> st_nlink; <span class="comment">/* Link count.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">__nlink_t</span> st_nlink; <span class="comment">/* Link count.  */</span></span><br><span class="line">    <span class="type">__mode_t</span> st_mode;   <span class="comment">/* File mode.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">__uid_t</span> st_uid; <span class="comment">/* User ID of the file&#x27;s owner.	*/</span></span><br><span class="line">    <span class="type">__gid_t</span> st_gid; <span class="comment">/* Group ID of the file&#x27;s group.*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __x86_64__</span></span><br><span class="line">    <span class="type">int</span> __pad0;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">__dev_t</span> st_rdev; <span class="comment">/* Device number, if device.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __x86_64__</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> <span class="type">int</span> __pad2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined __x86_64__ || !defined __USE_FILE_OFFSET64</span></span><br><span class="line">    <span class="type">__off_t</span> st_size; <span class="comment">/* Size of file, in bytes.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">__off64_t</span> st_size; <span class="comment">/* Size of file, in bytes.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">__blksize_t</span> st_blksize; <span class="comment">/* Optimal block size for I/O.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined __x86_64__ || !defined __USE_FILE_OFFSET64</span></span><br><span class="line">    <span class="type">__blkcnt_t</span> st_blocks; <span class="comment">/* Number 512-byte blocks allocated. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">__blkcnt64_t</span> st_blocks; <span class="comment">/* Number 512-byte blocks allocated. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __USE_XOPEN2K8</span></span><br><span class="line">    <span class="comment">/* Nanosecond resolution timestamps are stored in a format</span></span><br><span class="line"><span class="comment">       equivalent to &#x27;struct timespec&#x27;.  This is the type used</span></span><br><span class="line"><span class="comment">       whenever possible but the Unix namespace rules do not allow the</span></span><br><span class="line"><span class="comment">       identifier &#x27;timespec&#x27; to appear in the &lt;sys/stat.h&gt; header.</span></span><br><span class="line"><span class="comment">       Therefore we have to handle the use of this header in strictly</span></span><br><span class="line"><span class="comment">       standard-compliant sources special.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">st_atim</span>;</span>    <span class="comment">/* Time of last access.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">st_mtim</span>;</span>    <span class="comment">/* Time of last modification.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">st_ctim</span>;</span>    <span class="comment">/* Time of last status change.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> st_atime st_atim.tv_sec <span class="comment">/* Backward compatibility.  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> st_mtime st_mtim.tv_sec</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> st_ctime st_ctim.tv_sec</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">__time_t</span> st_atime;              <span class="comment">/* Time of last access.  */</span></span><br><span class="line">    <span class="type">__syscall_ulong_t</span> st_atimensec; <span class="comment">/* Nscecs of last access.  */</span></span><br><span class="line">    <span class="type">__time_t</span> st_mtime;              <span class="comment">/* Time of last modification.  */</span></span><br><span class="line">    <span class="type">__syscall_ulong_t</span> st_mtimensec; <span class="comment">/* Nsecs of last modification.  */</span></span><br><span class="line">    <span class="type">__time_t</span> st_ctime;              <span class="comment">/* Time of last status change.  */</span></span><br><span class="line">    <span class="type">__syscall_ulong_t</span> st_ctimensec; <span class="comment">/* Nsecs of last status change.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __x86_64__</span></span><br><span class="line">    <span class="type">__syscall_slong_t</span> __glibc_reserved[<span class="number">3</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __USE_FILE_OFFSET64</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> __glibc_reserved4;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> __glibc_reserved5;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="type">__ino64_t</span> st_ino; <span class="comment">/* File serial number.	*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中常用的属性段有</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">st_mode：文件类型和权限位</span><br><span class="line">st_ino：文件的i-node号</span><br><span class="line">st_dev：文件所在设备的ID</span><br><span class="line">st_nlink：链接数</span><br><span class="line">st_uid：文件所有者的用户ID</span><br><span class="line">st_gid：文件所有者的组ID</span><br><span class="line">st_size：文件大小（字节数）</span><br><span class="line">st_atime：最后一次访问时间</span><br><span class="line">st_mtime：最后一次修改时间</span><br><span class="line">st_ctime：最后一次改变时间（通常是文件元数据改变的时间）</span><br></pre></td></tr></table></figure>

<p>可以极简单地获取文件信息</p>
<p><code>stat</code>函数：用于获取给定路径下的文件的信息，并存储在一个<code>stat</code>结构体中，返回值为<code>int</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Get file attributes for FILE and put them in BUF.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">stat</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *__restrict __file,</span></span><br><span class="line"><span class="params">		 <span class="keyword">struct</span> stat *__restrict __buf)</span> __THROW __<span class="title function_">nonnull</span> <span class="params">((<span class="number">1</span>, <span class="number">2</span>))</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>若成功获取文件信息，则返回<strong>0</strong> 否则返回<strong>1</strong></p>
</blockquote>
<h3 id="va-list、va-start、va-arg、va-end函数"><a href="#va-list、va-start、va-arg、va-end函数" class="headerlink" title="va_list、va_start、va_arg、va_end函数"></a><code>va_list</code>、<code>va_start</code>、<code>va_arg</code>、<code>va_end</code>函数</h3><blockquote>
<p><code>va_list</code>：可以理解为一种新类型，类似于<code>int</code>。实例化一个类似于<code>list</code>的东西，但是名字是<code>va_list</code>。</p>
<p><code>va_start</code>：函数使用：<code>va_start(va_list n, paramN)</code>。</p>
<p>初始化一个<code>va_list</code>实例，<code>paramN</code>可以是任意参数，即初始化<code>n</code>以检索参数<code>paramN</code>以后的参数，通常<code>paramN</code>是指<code>paramN</code>之后的参数个数</p>
<p><code>va_arg</code>：函数使用：<code>va_arg(va_list n , T)</code></p>
<p>获取va_list n 中的<code>T</code>类型的参数，通常是从<code>paramN</code>之后的一个参数开始获取的（包含<code>paramN</code>之后的那个参数，但不包括<code>paramN</code></p>
<p>va_end：函数使用：va_end(va_list n)</p>
<p>释放<code>va_list n</code></p>
<p>函数示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明，可以传入任意多个参数，但第一个参数必须是int</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">//3个int相加，分别是 15， 56， 4</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Sum = %d\n&quot;</span>,  sum(<span class="number">3</span>, <span class="number">15</span>, <span class="number">56</span>,<span class="number">4</span>) );</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num_args, ...)</span> &#123;</span><br><span class="line">   <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实例化一个va_list ap</span></span><br><span class="line">   va_list ap;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">   va_start(ap, num_args);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_args; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i:%d\n&quot;</span>,i);</span><br><span class="line">    <span class="comment">//获取第一个int参数（是除了paramN之后的第一个，在本函数中也就是num_args后面的一个参数）</span></span><br><span class="line">    <span class="comment">//如果有参数不是int，则自动获取下一个，但是如果后面没有参数了，就会获取随机值</span></span><br><span class="line">    s=va_arg(ap,<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;va_arg(ap,int):%d\n&quot;</span>,s);</span><br><span class="line">       </span><br><span class="line">     <span class="comment">//累加</span></span><br><span class="line">     val += s;</span><br><span class="line">   &#125;</span><br><span class="line">   va_end(ap);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述函数中，需要用s变量承接va_arg(ap,int)是因为va_arg函数每调用一次，获取玩当前的值后会自动往后走，下次调用的时候可以直接获取，然后再往下走。</span></span><br></pre></td></tr></table></figure>

<p>说明：这四个通常是一套组合拳，而且用于自定义的函数中，通常不作为单独的函数被调用，而是处理自定义的函数传入的参数。</p>
<p>例如，上述例子中，定义的<code>sum</code>函数，可以接收任意多个参数，于是就是用这一套组合拳，处理这任意多的参数。</p>
<p>值得一提的是，<code>va_arg()</code>函数是处理任意多参数的关键，它能获取<code>sum</code>函数中第一个参数之后的所有参数（调用一次获取一次，并自动会跳到下一个参数【如果没有下一个，就是随机值】），并自动识别停止。</p>
</blockquote>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>编译学习-虚拟机部分--20230518</title>
    <url>/2023/05/18/%E7%BC%96%E8%AF%91%E5%AD%A6%E4%B9%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%83%A8%E5%88%86-20230518/</url>
    <content><![CDATA[<h1 id="编译学习虚拟机部分"><a href="#编译学习虚拟机部分" class="headerlink" title="编译学习虚拟机部分"></a>编译学习虚拟机部分</h1><span id="more"></span>

<h3 id="1、支撑知识"><a href="#1、支撑知识" class="headerlink" title="1、支撑知识"></a>1、支撑知识</h3><h4 id="关于电脑内存"><a href="#关于电脑内存" class="headerlink" title="关于电脑内存"></a>关于电脑内存</h4><p>电脑中的内存是虚拟地址映射到实际的内存上，而非真是有这么多。</p>
<h4 id="关于本次使用的内存段"><a href="#关于本次使用的内存段" class="headerlink" title="关于本次使用的内存段"></a>关于本次使用的内存段</h4><p>简单来讲，进程的内存会被分为以下几个段</p>
<blockquote>
<p>1.代码段（text），用于存放指令代码，位于较低地址。（可能是指令需要改动不多甚至不需要改动，放在一些低地址区域，该区域可能是只读的）</p>
<p>2.数据段（data），用于存放<strong>已经初始化的数据</strong>，例如<code>int i = 10</code>就是已经初始化的数据，需要存储到改位置。</p>
<p>3.未初始化数据段（bss），顾名思义，就是存放<strong>未初始化的数据</strong>的地方，例如<code>int i[1000]</code>就是属于只声明而未初始化的数据，存放在该段。</p>
<p>4.堆（heap），用于为程序动态分配内存。</p>
<p>5.栈（stack）用于处理函数调用的相关数据，例如调用帧或者函数的局部变量。</p>
</blockquote>
<p>在第一点中提到在代码段在内存中位于低地址区域，那么如下图所示：</p>
<p><code>图一</code></p>
<p><img src="/2023/05/18/%E7%BC%96%E8%AF%91%E5%AD%A6%E4%B9%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%83%A8%E5%88%86-20230518/%E5%9C%B0%E5%9D%80%E5%88%86%E5%B8%83.jpg" alt="各部分地址分布"></p>
<p>个人理解：在计算机内存中，低地址是不允许写入的，其中存放的数据都是一些系统级的或者是常量，例如数字（0-9），字符（a-zA-Z,.&#x2F;等），当程序需要时，就只能读取而不能写入。</p>
<p>而在高地址字段，例如堆栈，可以实现内存的动态分配和数据的调用和修改，即可读可写，提高了与用户的交互性。</p>
<p>为简单起见，本次只关心 <strong>①代码段 ②数据段 ③栈</strong></p>
<h4 id="③寄存器"><a href="#③寄存器" class="headerlink" title="③寄存器"></a>③寄存器</h4><p>寄存器用于存放计算机的运行状态，真实计算机中有许多寄存器，本次只用4种。</p>
<blockquote>
<p>1.<code>PC（Program Counter）程序计数器</code> 存放内存地址，该地址中放着<strong>下一条</strong>要执行的计算机指令</p>
<p>2.<code>SP（Stack Pointer）指针寄存器</code> 永远指向当前栈的栈顶。因为栈顶是由高地址扩张到低地址（可以参考图一，栈底在最顶端）所以当有数据入栈时，SP的地址值减小；当出栈时SP的地址值增大</p>
<p>3.<code>BP（Base Pointer）基址指针</code> 也是用于指向栈的某些位置（不想确定的位置，也并不是不能指向栈顶）</p>
<p>4.<code>AX（Accumulator Register）通用寄存器</code> 从英文上看出是累加寄存器，在虚拟机中，用于存放一条指令执行后的计算结果。</p>
<p><strong>PS：前三个都是存放地址的，定义是要指针定义，而AX是存放结果的，不用定义成指针。在实际计算机中，PC的初始值应该指向main函数的地址，但是现在 还没到这一步，先不指定。</strong></p>
</blockquote>
<h4 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h4><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>可不可以用unsigned int？？？</p>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><h4 id="类型问题"><a href="#类型问题" class="headerlink" title="类型问题"></a>类型问题</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ax;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == LC)   &#123;ax = *(<span class="type">char</span> *)ax;&#125;      <span class="comment">// load character to ax, address in ax</span></span><br></pre></td></tr></table></figure>

<p>if中的操作是将ax中的值作为地址，并且按照char类型解析该地址指向的内容，然后将解析完后的char重新赋值给ax，应该会导致类型冲突的呀。</p>
<blockquote>
<p><strong>解答</strong>：在计算机内存中，不论是<code>int</code>还是<code>char</code>还是各种指针类型，其实都是一个数，而<code>int</code>，<code>char</code>或者是<code>int*</code>，<code>char*</code>是决定程序在解析这个数的时候的方式（往后读多少个内存单元，按照什么类型解析）。</p>
<p>改代码中，如果ax不是很大的数（8位以内），可以正常运行，再大就会出现转换错误的情况。</p>
</blockquote>
<h4 id="sp-sp-pc"><a href="#sp-sp-pc" class="headerlink" title="sp = sp - *pc++"></a><code>sp = sp - *pc++</code></h4><p>将栈顶指针sp 减去下一个指令需要使用的空间大小，pc++是指下一个指令的地址，解引用后就是指下一个指令，同时是一个int值，为什么指的是下一个指令所需要的空间大小？</p>
<blockquote>
<p><strong>解答</strong>：在函数调用时，一个函数需要多大的空间运行，一般都会在函数内部用一个小空间存储这个内容。</p>
<p>这里将这个内容取出来减去，就是回收之前为子函数开辟出来的子函数提前告知的需要的空间。</p>
</blockquote>
<h3 id="TIPS："><a href="#TIPS：" class="headerlink" title="TIPS："></a>TIPS：</h3><h4 id="关于指针"><a href="#关于指针" class="headerlink" title="关于指针"></a>关于指针</h4><p><code>int * </code>和<code>char *</code>本质上都是指针，而指针都是一个数字，而计算机内指针都是用数字表示的，为什么不统一用int或者是unsigned int，而是要分int char和其它？</p>
<p>因为<code>int * </code>和<code>char *</code>指向的数字表示不同的数据类型，而且还是做指针运算时的重要依据，比如在int类型中，指针运算++是向后移动4个字节（大多数机器是这样的），而char类型在做指针运算时，往往只向后移动1个字节，计算机做出这样的依据就是所使用的指针类型。</p>
<p>其次，在计算机编译阶段，这两种类型对应存储的数据需要不同，计算机在编译时会检查<code>int * </code>和<code>char *</code>所指向的数据是否正确，若不正确则报错，避免潜在的错误。</p>
<p>GPT这样说：</p>
<blockquote>
<p>int *和char *在本质上的区别是指针所指向内存单元中存储的数据类型不同。</p>
<p>int * 是一个指向整型变量的指针，它所指向的内存单元中存储的是一个整型数值，占用 4 字节（在大部分机器上）。而 char * 则是一个指向字符型变量的指针，它所指向的内存单元中存储的是一个字节大小的 ASCII 码或者 Unicode 码。</p>
<p>在计算机编译时，int <em>和char * 在指针操作上会有所不同。在执行指针运算时，指针所指向的内存单元地址将根据数据类型的不同而发生改变。例如，对于一个 int</em> 指针变量 p，执行 p++ 操作时，p 的值将增加 4，因为一个 int 变量占用 4 个字节。而对于一个 char* 指针变量 q，执行 q++ 操作时，q 的值只会增加 1，因为一个 char 变量只占用一个字节。</p>
<p>此外，在编译器生成目标代码时，对于 int * 和 char * 所指向的内存单元，编译器在生成代码时还会进行类型检查。这是为了确保程序不会访问不正确的内存地址，避免潜在的错误。例如，在使用 int * 指针时，我们只能访问整型变量的内存地址，不能访问 char 或其他类型变量的内存地址。</p>
</blockquote>
<h4 id="关于栈顶"><a href="#关于栈顶" class="headerlink" title="关于栈顶"></a>关于栈顶</h4><p><code>SP指针寄存器</code> 永远指向当前栈的栈顶  此处的栈顶是最顶端的元素，而非最顶端元素的上面一个。</p>
<h4 id="一些骚操作"><a href="#一些骚操作" class="headerlink" title="一些骚操作"></a>一些骚操作</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == SC)   &#123;ax = *(<span class="type">char</span> *)*sp++ = ax;&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码的运算顺序是：</p>
<p>①sp++申请新空间</p>
<p>②*解引用</p>
<p>③将ax的值存进去</p>
<p>④char * 强转</p>
<p>⑤*解引用</p>
<p>⑥将值再赋给ax（如果ax中的数字小的话，其实没变）</p>
<h4 id="pc-1和-int-pc"><a href="#pc-1和-int-pc" class="headerlink" title="pc+1和(int *)*pc"></a><code>pc+1</code>和<code>(int *)*pc</code></h4><p><code>pc = pc+1</code>是指顺序执行下一行代码（从上帝视角来看）</p>
<p><code>pc = (int *) *pc</code>是指跳转到下一个语句块</p>
<p>从JMP指令的实现是<code>pc = (int *) *pc</code>就能看出，如果if后面是0，那么则回执行<code>pc = (int *) *pc</code>，实质上是进行了一次JMP。</p>
<h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>What I did today</category>
      </categories>
      <tags>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>编译设计</title>
    <url>/2023/05/12/%E7%BC%96%E8%AF%91%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="着手设计"><a href="#着手设计" class="headerlink" title="着手设计"></a>着手设计</h1><span id="more"></span>

<h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p>学习<strong>手把手教你构建C语言编译器–设计</strong>部分</p>
<p><a href="https://lotabout.me/2015/write-a-C-interpreter-1/">手把手教你构建 C 语言编译器（1）- 设计 </a></p>
<p>试写了文章中的代码，虽然成功了，但是有点问题。</p>
<h4 id="2、概念"><a href="#2、概念" class="headerlink" title="2、概念"></a>2、概念</h4><p>编写一个编译器一般为<strong>①词法分析器；②语法分析器；③目标代码生成</strong>。以下为手写这些构成部分。</p>
<p>一个编译器的框架首先是有</p>
<blockquote>
<p>编译器包含四个函数：</p>
<p>1、next()函数，用于读取下一个标记，会自动忽略掉空格；	&#x2F;&#x2F;读程序</p>
<p>2、program()函数，语法分析的入口，分析整个程序。本部分不写；	&#x2F;&#x2F;做语法分析</p>
<p>3、expression(level)函数，用于解析一个表达式。本部分不写；	&#x2F;&#x2F;做语义分析</p>
<p>4、eval()函数，虚拟机接口，可以解释目标代码。</p>
</blockquote>
<h4 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h4><p>以下是代码块，和教程上的代码一模一样，，，，，</p>
<p><code>code01</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> token;</span><br><span class="line"><span class="type">char</span> *src, *old_src;</span><br><span class="line"><span class="type">int</span> poolsize;</span><br><span class="line"><span class="type">int</span> line;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取src中下一个字符的ASCII码值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    token = *src++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式分析pewpwd</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">expression</span><span class="params">(<span class="type">int</span> level)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环读取文件，直到token小于0（因为token是ASCII，所以没有小于0 的情况，等于0就是结束符）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">program</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    next(); <span class="comment">// get next token</span></span><br><span class="line">    <span class="keyword">while</span> (token &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;token is: %c\n&quot;</span>, token);</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚拟机接口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">eval</span><span class="params">()</span></span><br><span class="line">&#123; <span class="comment">// do nothing yet</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, fd;</span><br><span class="line"></span><br><span class="line">    argc--;</span><br><span class="line">    argv++;</span><br><span class="line"></span><br><span class="line">    poolsize = <span class="number">256</span> * <span class="number">1024</span>; <span class="comment">// arbitrary size</span></span><br><span class="line">    line = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fd = open(*argv, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;could not open(%s)\n&quot;</span>, *argv);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(src = old_src = <span class="built_in">malloc</span>(poolsize)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;could not malloc(%d) for source area\n&quot;</span>, poolsize);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read the source file</span></span><br><span class="line">    <span class="keyword">if</span> ((i = read(fd, src, poolsize - <span class="number">1</span>)) &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;read() returned %d\n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    src[i] = <span class="number">0</span>; <span class="comment">// add EOF character</span></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    program();</span><br><span class="line">    <span class="keyword">return</span> eval();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、问题"><a href="#4、问题" class="headerlink" title="4、问题"></a>4、问题</h4><p>①第三行 include 的 memory.h 好像没用到（可能之后会用到吧）</p>
<p>②第52行，open函数中的参数，第一个参数是取用户输入的第一个参数，但是第二个参数不理解。</p>
<p>翻看了函数原型，代码如下：</p>
<p><code>code02</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__fortify_function <span class="type">int</span></span><br><span class="line"><span class="title function_">open</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *__path, <span class="type">int</span> __oflag, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (__va_arg_pack_len () &gt; <span class="number">1</span>)</span><br><span class="line">    __open_too_many_args ();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_constant_p (__oflag))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (__OPEN_NEEDS_MODE (__oflag) &amp;&amp; __va_arg_pack_len () &lt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  __open_missing_mode ();</span><br><span class="line">	  <span class="keyword">return</span> __open_2 (__path, __oflag);</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="keyword">return</span> __open_alias (__path, __oflag, __va_arg_pack ());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__va_arg_pack_len () &lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> __open_2 (__path, __oflag);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> __open_alias (__path, __oflag, __va_arg_pack ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个参数是int类型没错，但是具体含义不知道。</p>
<p>上网查后，解释是，第二个参数代表对该文件的操作权限，例如：只读，只写，读写。但是很神奇，这些权限的表示方法如下：</p>
<blockquote>
<table>
<thead>
<tr>
<th align="center">flags 参数</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">O_RDONLY</td>
<td align="center">只读模式</td>
</tr>
<tr>
<td align="center">O_WRONLY</td>
<td align="center">只写模式</td>
</tr>
<tr>
<td align="center">O_RDWR</td>
<td align="center">可读可写</td>
</tr>
<tr>
<td align="center">O_APPEND</td>
<td align="center">表示追加，如果原来文件里面有内容，则这次写入会写在文件的最末尾</td>
</tr>
<tr>
<td align="center">O_CREAT</td>
<td align="center">表示如果指定文件不存在，则创建这个文件</td>
</tr>
<tr>
<td align="center">O_EXCL</td>
<td align="center">表示如果要创建的文件已存在，则出错，同时返回 -1，并且修改 errno 的值</td>
</tr>
<tr>
<td align="center">O_TRUNC</td>
<td align="center">表示截断，如果文件存在，并且以只写、读写方式打开，则将其长度截断为0</td>
</tr>
</tbody></table>
</blockquote>
<p>如表所示，并没有数字，不理解。。。。。。</p>
<blockquote>
<p><strong>解答</strong>：这些flags参数是在一个枚举类型中的常量，如下代码所示：</p>
<p><code>code03</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    O_RDONLY,   <span class="comment">// 只读打开</span></span><br><span class="line">    O_WRONLY,   <span class="comment">// 只写打开</span></span><br><span class="line">    O_RDWR,     <span class="comment">// 读写打开</span></span><br><span class="line">    O_APPEND,   <span class="comment">// 追加方式打开</span></span><br><span class="line">    O_CREAT,    <span class="comment">// 若文件不存在，则创建该文件</span></span><br><span class="line">    O_EXCL,     <span class="comment">// 与O_CREAT一同使用，如果文件已经存在则出错</span></span><br><span class="line">    O_TRUNC,    <span class="comment">// 截断文件长度为0</span></span><br><span class="line">    O_NOCTTY,   <span class="comment">// 不要把设备用作控制终端</span></span><br><span class="line">    O_NONBLOCK, <span class="comment">// 非阻塞模式</span></span><br><span class="line">    O_SYNC      <span class="comment">// 同步方式打开</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码就是一个枚举类型（包括之后的指令集也是枚举类型），从第一个到最后一个按照自然数（0或许不是自然数？）顺序排列，比如<code>O_RDONLY</code>就是<code>0</code>，以此类推。。。</p>
</blockquote>
<p>③当我运行这个文件时，即执行下列命令</p>
<p><code>code04</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$$ gcc 01.c -o 01</span><br><span class="line">$$$ ./01 01.c</span><br></pre></td></tr></table></figure>

<p>逐个字符读取只读到了第11行的&#x2F;&#x2F;和其后的一个空格，程序就中止了，不知道为什么。。。。。。</p>
<p>开始觉得是因为后面是中文字符，于是在“读取”前面随便加了几个字母，发现读取成功，但是<strong>将后面的所有中文语句换成英文之后又行不通了</strong></p>
<p>又试了一下，一读到注释就不行了。</p>
<blockquote>
<p><strong>解答</strong>：其实就是字符问题，因为在<code>next</code>函数中，读的是字符的ASCII码值，而中文字符在ASCII中是没有位置的，因此读不下去了，所以文件中避免出现中文。</p>
<p>其原理是，读取函数根据数据类型（其实所有的都是这样的）决定本次读取往后读多少个字节单位，而char只有一个字节，但是中文字符占两个或者三个字节（根据编码不同而相异），因此不能继续读下去</p>
<p>如果将第28行中的<code>token &gt; 0</code>改成<code>token != EOF</code>就可以成功读完文件，但是对应的中文都是乱码，而且由于前面中文出现了“断章取义”的现象，后面的英文大概率也是乱的。</p>
<p>还有一个方法就是用wchar类型，也就是将第7行的<code>src</code>和<code>old_src</code>定义为<code>wchar*</code>类型，这样就可以正常读中文了。</p>
</blockquote>
<h4 id="5、TIPS"><a href="#5、TIPS" class="headerlink" title="5、TIPS"></a>5、TIPS</h4><p>①先看第64行，src里面是读取的文件内容，和第69行联系起来看，第69行在 i 的位置加了个0，即为封口。于是 i 的值就有点耐人寻味了。</p>
<blockquote>
<p>read 函数 返回值有三种情况。</p>
<p>1、读取出错，返回-1，即有如果 i 小于 0 ，那么直接print错误</p>
<p>2、读取时，未达到第三个参数设置的大小就读完了。这是最正常的情况。此时返回的 i 就是大于0且小于第三参数。且为已经读到的字节数。（个人理解为就是EOF的下标，后面才可以在 i 处封口）</p>
<p>3、读取时，文件大小超过第三参数大小，即没读完就读不下了，这时返回的仍然是已经读取到的字节数，但是比较特殊，其值等于第三参数。</p>
</blockquote>
<p>除了读取错误返回-1，其余两种情况都进行了封口操作，即便有一种情况是强制封口。</p>
<p>②从51行开始，到55行，其实做了两件事：第一、open文件；第二、判断错误，如果文件描述符fd小于0，那么打开文件错误。</p>
<blockquote>
<p>文件描述符返回值：成功则返回0，失败返回-1</p>
</blockquote>
<p>同理，先两个if代码块也是如此，先进行相关操作，再判断操作是否错误</p>
<p>任何错误都将直接返回-1</p>
<p>③next() 函数中 token 读取的其实是ASCII码值，并且通过地址将值带出。</p>
<p>④第46、47行，有个argc- -和argv++</p>
<blockquote>
<p>argc- - 意思是将参数减少。通过查资料可以知道，main函数自带的两个参数其实是本程序的输入参数个数（argc）和输入的参数构成的数组（argv）。值得注意的是，这两个参数都包含他们自己。所以argc初始值就是2，agrv[0]初始值是2，argv[1]初始值是argv（即首地址）</p>
</blockquote>
<p>运行时要解析命令，先把第一个用户输入参数去掉，argc- -，因为第一个往往是调用编译程序的参数，当调用到正确文件时，就不需要第一个参数了。</p>
<p>argv++是地址++，就是跳转到下一个命令参数，然后给程序读取，执行相应操作。</p>
]]></content>
      <categories>
        <category>What I did today</category>
      </categories>
      <tags>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>20230509（混账版）</title>
    <url>/2023/05/09/20230509/</url>
    <content><![CDATA[<h1 id="混账版"><a href="#混账版" class="headerlink" title="混账版"></a>混账版</h1><span id="more"></span>

<p>昨天没写，今天也混账</p>
<p>都是水！！</p>
<p>准备签证资料，烦得很</p>
<p>装好了Ubuntu20.04版本，如果有些button显示不全，就是分辨率的问题，如果输入法奇怪，去设置里面吧全屏和双拼换一下，换成微软的输入法，其它都还可以。Ubuntu比Windows好用。</p>
<p>操作系统，恶补</p>
<p>无</p>
<p>END</p>
]]></content>
      <categories>
        <category>What I did today</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title>龙书的散件</title>
    <url>/2023/05/07/20230507/</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="龙书的皮屑"><a href="#龙书的皮屑" class="headerlink" title="龙书的皮屑"></a>龙书的皮屑</h1><span id="more"></span>

<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>挺有意思的。</p>
<h5 id="静态作用域"><a href="#静态作用域" class="headerlink" title="静态作用域"></a>静态作用域</h5><p>在C语言中，代码的作用域是通过一对花括号**{}<strong>来决定的，一个花括号包围起来的部分叫做一个</strong>块<strong>而且C语言支持块的嵌套，这种嵌套特性叫做</strong>块结构**。</p>
<p>例如下面的代码</p>
<p><code>code scope1</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a  =<span class="number">3</span>;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> b = <span class="number">4</span>;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a: &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; b: &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在任何编译器上执行，执行结果一定是如下图所示</p>
<img src="/2023/05/07/20230507/scope.jpg" alt="scope" style="zoom:150%;">

<p>第11行中的 a 是第10行的 a ，并且，观察第九行和第十位行，得知，a &#x3D; 3只在这个区域有效，而在此之前，观察第八行 int b &#x3D; 2，也只在第七行的 { 和第十八行的 } 之间有效。因此，最后一次的输出结果正是最初定义的数值。以此类推也就不难理解作用域了。</p>
<p>例如Java语言，定义了关键字来表示一个或者一些成员变量的作用域。其中<strong>private</strong>表示私有的，即只有该类能够访问该成员变量；<strong>protected</strong>表示被保护的，即该类及其子类可以访问；<strong>public</strong>表示公共的，即不论在程序的哪个部分都可以访问。</p>
<h5 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h5><p>如果说例如<code>code scope1</code>中的代码，编译器在编译阶段就可以确定某个变量的值，那么可以将这些变狼的作用域叫做静态作用域。那么相应的还有动态作用域。即程序在编译时刻并不知道这个变量到底什么时候有，或者在这个地方代表什么值。</p>
<p><code>code scope2</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> a (x + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x =<span class="number">1</span>;  </span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f1</span>();</span><br><span class="line">    <span class="built_in">f2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在代码块<code>code scope2</code>中，先宏定义了一个a，且值等于x+1，但是并不知道x在哪，x的值是多少。</p>
<p>在函数f1中，重新定义了x &#x3D; 1，因此，x &#x3D; 1作用域只在f1中有效，所以输出结果是____;在函数f2中，并没有重新定义x，因此x还是全局定义时的2，所以输出结果是____。</p>
<h4 id="函数传参机制"><a href="#函数传参机制" class="headerlink" title="函数传参机制"></a>函数传参机制</h4><p>函数传参大多数无非使用两种机制<strong>值调用</strong>和<strong>引用调用</strong>。涉及到<strong>形式参数（形参）</strong>和<strong>实在参数（实参）</strong></p>
<h5 id="值调用"><a href="#值调用" class="headerlink" title="值调用"></a>值调用</h5><p>在调用时，内部处理对实参进行拷贝，将拷贝的值放在函数中进行处理，但是在主函数中，依旧是原来的值。可以简单地理解为，对实参的<strong>盗版</strong>进行了一系列处理，但是对正版没做出任何处理，在实际使用中依旧是使用正版。</p>
<p>但是在C语言中，我们可以传一个变量的指针进函数，虽然也是对传进去的值进行拷贝后处理，但是传原来的指针和拷贝后的指针都指向同一个内存区域，即同一个值，如果对该值做出处理。那么原来的值也会相应改变。</p>
<p>还有一种方法，我们可以将值return出来，但是，其实也不改变之前按变量的值，只是return出来的值变了。</p>
<p><code>code3</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x ++;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f2</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x ++;</span><br><span class="line">    <span class="keyword">return</span> x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f3</span><span class="params">(<span class="type">int</span>* x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (*x)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">f1</span>(x);</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">f2</span>(x)&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">f3</span>(&amp;x);</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="引用调用"><a href="#引用调用" class="headerlink" title="引用调用"></a>引用调用</h5><p>引用调用其实就是将需要调用的参数的地址传到相应函数进行处理。</p>
<p>但是，如果调用的实参时一个表达式，那么，编译器会先将表达式的值计算出来，然后存在自己的位置（另外的位置），改变形参会改变这个位置上的值，但是对调用者的数据没有影响。</p>
<p>友链：<a href="https://blog.csdn.net/m0_37618340/article/details/81070416#:~:text=%E6%8C%89">按值调用和按引用调用</a></p>
<h4 id="TIPS："><a href="#TIPS：" class="headerlink" title="TIPS："></a>TIPS：</h4><p>①声明和定义：声明式告诉我们事物的类型，而定义告诉我们它的值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i;<span class="comment">//声明</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>; <span class="comment">//定义</span></span><br></pre></td></tr></table></figure>

<p>②别名：如果p和q指向同一位置，那么p和q实质上是一样的，则称p是q的别名，或者 q是p的别名。他们之间任一改变都会影响另一个的改变。</p>
]]></content>
      <categories>
        <category>What I did today</category>
      </categories>
      <tags>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>接上篇</title>
    <url>/2023/05/06/20230506/</url>
    <content><![CDATA[<h2 id="今天学的有点散乱"><a href="#今天学的有点散乱" class="headerlink" title="今天学的有点散乱"></a>今天学的有点散乱</h2><span id="more"></span>

<p>上一篇文章：<a href="/2023/05/05/20230505/" title="开始接触编译">开始接触编译</a></p>
<h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p>即使用语法树和符号表，检查源程序是否和语言定义的语义一致，同时收集类型信息，将它们放在语法树或者符号表中，后面的中间代码生成中会用到。</p>
<p>同时，在语法树中，自动类型转换可以作为一个单独的节点表示，如下图</p>
<p><img src="/2023/05/06/20230506/cast.jpg" alt="cast"></p>
<p>inttofloat 表示把一个整型转换成一个浮点型。当上述（上篇文章）中的a，b，c都是浮点型时，30必须转换成浮点型才能和它们进行运算，因此发生了自动类型转换。且从低精度到高精度的转换是自然的。</p>
<h4 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h4><p>其实，上述文章中一直在讲的<strong>语法树</strong>已经是一种中间代码了。</p>
<p>中间代码需要满足两点：①<strong>易于生成</strong>     ②<strong>易于被翻译成目标机器的语言</strong></p>
<p>例如<strong>三地址代码</strong></p>
<p>上述表达式<strong>a &#x3D; b + c * 30</strong>可以表示为</p>
<p><code>code1.1</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1 = inttofloat(30)</span><br><span class="line">t2 = id3 * t1</span><br><span class="line">t3 = id2 + t2</span><br><span class="line">id1 = t3</span><br></pre></td></tr></table></figure>

<p>上述代码块就是三地址代码。</p>
<p>三地址代码有以下要求：①<strong>赋值指令右侧最多只能有一个运算符</strong>（为了保证运算顺序）；②<strong>编译器应该生成一个临时变量名存放三地址指令计算得到的值</strong>（例如t1,t2,t3）;③<strong>有些三地址代码的运算分量少于三个</strong>（例如上述代码块第1行和第4行）.</p>
<h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p>机器无关代码的优化，实质上就是改进中间代码，从而可以生成更好的目标代码（更好意味着执行更快或者功耗更小等等）</p>
<p>比如，上面的三地址代码第一行，可以在编译的时候直接用<strong>30.0</strong>替换<strong>30</strong>，从而避免进行转型运算，中间步骤也可以优化，具体如下</p>
<p><code>code1.2</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1 = id3 * 30.0</span><br><span class="line">id1 = id2 + t1</span><br></pre></td></tr></table></figure>

<h4 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h4><p>即生成目标机器的语言。</p>
<p>中间代码作为代码生成器的输入，映射到目标语言。如果目标机器的目标语言是机器代码，那么就需要合理分配寄存器以存放变量的值。</p>
<p>例如，code1.2 可以被翻译成如下形式</p>
<p><code>code1.3</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDF R2,id3</span><br><span class="line">MULF R2,R2,#30.0</span><br><span class="line">LDF R1,id2</span><br><span class="line">ADDF R1,R2</span><br><span class="line">STF id1,R1</span><br></pre></td></tr></table></figure>

<p><strong>自行理解</strong></p>
<h4 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h4><p><strong>符号表是一种数据结构</strong>，可以存储变量的各个属性，例如变量的存储分配，变量类型，变量的作用域等等。</p>
<h4 id="趟"><a href="#趟" class="headerlink" title="趟"></a>趟</h4><p>可以将多个步骤组合成一趟。例如前端步骤中的词法分析，语法分析，语义分析以及中间代码生成可以被组合成一趟，而代码优化可以作为一个可选择的趟。还可以有一个为特定目标机器生成代码的后端趟。</p>
<p>可以有不同的前端趟和某个固定的机器后端结合，实现一台机器可以编译多种语言</p>
<p>也可以固定的前端趟和不同的机器后端结合，实现同一语言不同机器编译</p>
<h4 id="编译器构造工具"><a href="#编译器构造工具" class="headerlink" title="编译器构造工具"></a>编译器构造工具</h4><p>顾名思义，就是做编译器的东西</p>
<p>1）语法分析器的生成器：根据某一规则，生成相应的语法分析器</p>
<p>2）扫描器的生成器：根据某一规则，生成相应的扫描器（扫描器也即词法分析器）</p>
<p>3）语法制导的翻译引擎：生成一组用于遍历语法树并生成中间代码的例程（没大懂，抄书的）</p>
<p>4）代码生成器的生成器：根据某些<strong>如何把中间语言翻译成目标机器语言</strong>的规则，生成代码</p>
<p>5）数据流分析引擎：收集数据流信息，即，程序的值如何从程序的一个部分流向另一个部分，可以简单的理解为，函数传参。</p>
<p>6）编译器构造工具集：构造编译器工具的集合      <strong>纯纯废话了</strong></p>
<p>END</p>
]]></content>
      <categories>
        <category>What I did today</category>
      </categories>
      <tags>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>注册GPT</title>
    <url>/2023/05/06/%E6%B3%A8%E5%86%8CGPT/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6b7bf50bd41394e503f62969d764ed72c9713d4cefcb63092cc12651edcceb27">4630436162ade97ba2718b7d0c4b3b63cb3a3f659c5ca08b4bca0f5845928186df8f2756c43971a118e851709297bccf155b395cf773d208ccb8a172a2b7fdb59343265437c52df6e148cfb73903a85bd7775e486d959713845b7c0d63c0c2daa8fb39a105bea6d9085ea460c8f9e730fb6331b31088000e2538cabf7de26b07fce0a9b71381b480b63b934406caa07ffa2ab87798be35f5fbdbfa8907a37509422eb7724fc428acb5a0b8770bd3968ff160a13472fb09413da2cc4af69aeafdd7db9c8d4c6e7242aa01610a7ad737b86629be436cb906f1ff3bc49db88ffc4efaf3c50f147484826af90623732b10cea9e6fb89552ab84306df23712a88057cac6409fe2de37cd8568cc00573d7d1a15e5560d500aa0007b54cce85c64697aef818d4dc97ade896b89973f473430f46daa7a27749373c43a175a1f7e398d55dabaa30d4d4372fb2627c73052a4568f071038f010283bd9749c96b03cf3cb4a5bb88facf1dd6343a8b8250e995d4758d97ddbc79b858ee9d1980c205937a1ae4328ad1f65cf96b6c071283685057fd23301687882d3a8d941df173eb5e6ca1dc1cfca66f8b0e808799f3ff2525bfa2c3f322d51dfa3331056403a804186eafa4893a52175da8ea68abb48bbf727b08e18b4eb6b3ebf86d23eed107e9d0daaf926badb1db3345071d9b88c8bfc536731e990be76dc058a392b75aa7d67c6fbe46be802aa8b156102cfe8be18f762f3630bc3552e194bd4958a84c05ae4711e6bc07fb34c9eaf2012daeb74c85aed326ba7d7c3cefb52498e6f76dcf2048ded3df12caf6ade1677a8cd745f776bb6e5e9e579665c6c2ef09bd9b00a8b27069695014531bd325a3370ee0c64088a044daa0eb9d711c25fd5a44de3bd56ec6beb2fe5862173bc2c720bea8fda58482670cf265856c6081ec0200032ff26a99a16c6004ce3631aaf3a5847c283e615eb32aef4ea27c18633a7550877630dd522a42542ea549e27ceb85bbc2e10f3618acefdb70f29aa551b6bcef47d7896c1ac7d09f052acdae3681f4b491fe8f31290eacfa0dd99d433ffa14368930447add6f815264ff9d8d862d44d05e0e373d5914ba77065c3bcdb876434588b3d9e42b25a6aa49fc2c2140d4e5011bbb873b4bc84e0c4c41d78d983fd616189ef79c750e50fab0d9e3ad3c980dc438d6b6af9e71a51449fb990a20f92c3c8917e1c5e231c39f9290a6257780ead3fad84917dabe7aa2feff35c63762ad0cd60dc414b335f052074644068aaf8d16790507398887935d3c60e602ae47a4f4cdd0892759961921bb54976b88a748b8d158b65be978ddc024228353959873f8d3f69736533fc6576c8346c5d5ac44fb6f03336238a5729a2024fab8dcda6905c8af9afcfca0d1cf58726799ca00fa09ac9b94d4ed18190c9553df151723e70d2444ba57435c068bf1637d3cda0ae286b1c8e16fe3755158c41e0826e4f373c3a85c9cff0773c0a01adad108bf0a29ef99471fbcdcc17813269577dd1e0b654fe854ce27c6646d5bac3bcdfce139d08e024f64f90efc66a10c9e65540e5b6d109d4770d90232b5729017a9684d631a06bc871aa51e34fa5ba2bec1b342e59fb918b795d70c2f1989c1afdb919ca7b613295b9bc47b86bb0eb7a1c43bd6b4ad1a5cc61a8aa1639940d825ebcbfbabd2e1ca6910151f3768eb48b63462d503cf96236336d9aa536b71649bee6fbe5cdddb6c51bca4c38c4ced0b96648965eff8cd3de0c5a94d744f9962391e720a8799266550bfddae4d728c1cded2a26afa638bcb745a00f51a3bf2683d1d9fab2a2952160ae522daab913806f039fa38a007d811976d450f7246a9548e80706687c6fc2e96f544f750e306ff0389f67503f53e473224577fb77cd031d6c19fff445700f9d9d36cf6b2ad8639c915813756ea6e608aefbc1f4714dd0689c696d371cc87522b516403b171903397da899bdf92a7698fddb87041034f5924e8e065637b33824da259a6dc9c40aebab76888335d7c42cba7be4dd025263b2824af32ab43a8097ed812ff315a613ffd0d476120ccbd9848e30c21f8ec21ef251bbc47cb2a31de5d1db618966c633b2671fb40171ac864fc0ee993d102d8668c15726e0aee53c26dde7906d49977658001351d0d3569e8005ae95848e9a2ca22667f3bebdf87c3e30e8df383c90151ec4e5124d3d0ade11b8a278ce9e3b83e5d656a8ec9cd74518a8f939a96add385efd16ae321e7d684bfce848f62beded900e1896188be171a6eaa8dd9c1dd340bfd08e3cb1ccdd51ff4497026086521ea4f839354b15dce436a3d48dea2fa173678f2fd71eb09ad32b26fea94c7d2a6ba2c3844c9abad931c77fbe3e46cc8220a2c84502212130a6e849ab4310f74a8e031f3718909af7999009ea3a8089698389d535685a24af3c9f3aac0ee142ff3dfb64abf937e78f3479fcb00644399415bdf038f221a8974b77e872193ff6679b330c1a1d35fc21efb2684de135bacdb3a33b5629f6ebee92ae67510872ecdfdaf40061d89edd93f8e3bf2d3c83121413649932f1b2bed5049930ae0a1909b469a63c249f1be15f0375d8acc98885dc8de96dc56204401b4fc0b3334e6aa2f2a89d42a775f88e72cf618b5c2d6bfe42a767fcff2e626b8bef18e685ee8b401f30ecd70a6629e94f3351af564169f6f13508c5c226e98e1dc424edef9d55d6f427be1e6abbc31fe63f24f74ad065e2cb8984c2ba985c9f9ed30cb900d74472f5335d13ddf27a7ea28088ba77e522a9d59c4ab00ec9f52c80f3e1733ca37b37f7f5fca3150f8d98ac584cc22f44de606a3b103b6fb4f106d51447a5575c4b2b222828a73d1c4c3c76f3ab18ca7377dbd2b678eef260616710588cfda8058dbf1b7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>chatgpt</category>
      </categories>
      <tags>
        <tag>注册ChatGpt</tag>
      </tags>
  </entry>
  <entry>
    <title>开始接触编译</title>
    <url>/2023/05/05/20230505/</url>
    <content><![CDATA[<h1 id="编译学习"><a href="#编译学习" class="headerlink" title="编译学习"></a>编译学习</h1><span id="more"></span>

<h4 id="编译器和解释器"><a href="#编译器和解释器" class="headerlink" title="编译器和解释器"></a>编译器和解释器</h4><p>编译器是将源程序通过一定的步骤转成目标程序。目标程序可以接收用户的输入，通过内部代码的加工，计算得出结果后输出。</p>
<p>解释器是逐句执行源程序。编译器是整个文件一块编译，因此，编译器比解释器快，但是出错率高；解释器的错误诊断效果好于编译器，但是速度比编译器慢。</p>
<blockquote>
<p>在把用户输入映射成为输出的过程中，由一个编译器产生的机器语言目标程序通常比一个解释器快很多。然而，解释器的错误诊断效果通常比编译器好，因为它逐个语句地执行源程序。——《编译原理》（第二版）</p>
</blockquote>
<h4 id="Java语言的处理"><a href="#Java语言的处理" class="headerlink" title="Java语言的处理"></a>Java语言的处理</h4><p>Java语言在机器内部处理时，是将编译和解释过程结合起来执行的。Java的运行环境是JDK虚拟机。Java源程序通过编译形成<strong>字节码</strong>，字节码再通过虚拟机进行解释和执行。</p>
<p>形成字节码，Java源程序就可以在不同机器上执行，因为字节码可以通过网络在机器之间传播。</p>
<h4 id="程序编译"><a href="#程序编译" class="headerlink" title="程序编译"></a>程序编译</h4><p>一个源程序可能会被分成多个模块进行存储，放在独立的文件中。有时，<strong>预处理器</strong>独立把源程序合并在一起；同时，预处理器还负责将宏转换为源语言的语句.</p>
<p>经过预处理后的源程序作为输入传递给编译器。编译器可能会把这些编译之后输出一个汇编语言的程序：<strong>因为汇编语言比较容易输出和调试</strong>，然后，汇编语言由<strong>汇编器</strong>处理，并生成<strong>可重定向</strong>的机器代码。</p>
<p>大型程序经常被分成多个部分进行编译，因此，可重定向的机器代码有必要和其他可重定向的目标文件以及库文件连接到一起，形成真正的在机器上运行的代码。而<strong>链接器</strong>能够解决外部内存地址问题。最后，<strong>加载器</strong>把所有可执行目标文件放到内存中执行。</p>
<h4 id="编译器：将源程序映射成语义上等价的目标程序"><a href="#编译器：将源程序映射成语义上等价的目标程序" class="headerlink" title="编译器：将源程序映射成语义上等价的目标程序"></a>编译器：将源程序映射成语义上等价的目标程序</h4><p>这个映射过程可以分为<strong>分析部分</strong>和<strong>综合部分</strong></p>
<p>分析部分：将报错信息（报错信息在符号表中）和代码的中间形式一起发送给综合部分。</p>
<p>综合部分：之后再谈。</p>
<h4 id="一个编译器的各个步骤"><a href="#一个编译器的各个步骤" class="headerlink" title="一个编译器的各个步骤"></a>一个编译器的各个步骤</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">字符流-&gt;(词法分析器)-&gt;符号流-&gt;(语法分析)-&gt;语法树-&gt;(语义分析)-&gt;语法树-&gt;(中间代码生成器)-&gt;中间表示形式-&gt;(机器无关代码优化器)-&gt;中间表示形式-&gt;(代码生成器)-&gt;目标机器语言-&gt;(机器相关代码优化器)-&gt;目标机器语言</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>以上括号内的内容是编译器各个功能块，无括号内容是输入输出流。</p>
<h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p>1、读入字符流，组织成有意义的<strong>词素</strong></p>
<p>2、对于每个词素，输出<strong>词法单元（token）</strong>&lt;token-name.attribute-value&gt;</p>
<p>​	例如：a &#x3D;  b + c * 30  可以被词法分析成</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;id,<span class="number">1</span>&gt;&lt;=&gt;&lt;id,<span class="number">2</span>&gt;&lt;+&gt;&lt;id,<span class="number">3</span>&gt;&lt;*&gt;&lt;<span class="number">30</span>&gt;</span><br></pre></td></tr></table></figure>

<p>原表达式中的空格会被忽略，变量a,b,c，运算符&#x3D;，+，*以及数字30都是词素。</p>
<h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p>语法分析用词法分析生成的各个词法单元的第一个分量来创建树形的中间表示，常用的表示方法是语法树，树中的每一个父节点是运算符，它的左右子节点就是进行该运算的运算分量。</p>
<p>上述例子的树形语法表示如下图：</p>
<p><img src="/2023/05/05/20230505/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.jpg" alt="语法分析"></p>
<p>END</p>
]]></content>
      <categories>
        <category>What I did today</category>
      </categories>
      <tags>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>算法设计与分析</title>
    <url>/2023/05/04/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="08c1c8a2e59dfda697e9f1dff9eb7128877d75e23657bc6d9d8986b206fb8d0f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
  </entry>
  <entry>
    <title>Java和算法</title>
    <url>/2023/05/04/20230504/</url>
    <content><![CDATA[<h1 id="纯试手写第一篇文章"><a href="#纯试手写第一篇文章" class="headerlink" title="纯试手写第一篇文章"></a>纯试手写第一篇文章</h1><span id="more"></span>

<h3 id="上午写java实验——内部类和自定义类实验"><a href="#上午写java实验——内部类和自定义类实验" class="headerlink" title="上午写java实验——内部类和自定义类实验"></a>上午写java实验——内部类和自定义类实验</h3><p>注意到了一个细节，try范围内的代码是只要有异常抛出，就不会执行下去了，直接跳转到catch，后面也不会跳回去，除非有while循环，才可以循环执行try范围内的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    reald = Double.parseDouble(real);</span><br><span class="line">    virtuald = Double.parseDouble(virtual);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;格式不对，请重新输入:&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码如果 real 转换成 reald ，那么直接跳转到第一个 catch ，之后的 virtual 转换成 virtuald 和  break 不会发生。</p>
<p>如果需要无条件执行一些代码，则需要使用关键字 finally。例如下面代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    reald = Double.parseDouble(real);</span><br><span class="line">    virtuald = Double.parseDouble(virtual);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;格式不对，请重新输入:&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码若输入 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ff</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>即将 ff 和 1 转型为 double 类型，显然，ff 不能转型为 double 类型，因此捕获异常，直接跳转到第 6 行，其中第 4 行的 break 并不会执行，但是第 10 行的 println 确执行了。</p>
<h6 id="finally-关键字只有在退出虚拟机的时候才会被中断，否则不会中断。"><a href="#finally-关键字只有在退出虚拟机的时候才会被中断，否则不会中断。" class="headerlink" title="finally 关键字只有在退出虚拟机的时候才会被中断，否则不会中断。"></a>finally 关键字只有在退出虚拟机的时候才会被中断，否则不会中断。</h6><p>执行代码结果如下图</p>
<p><img src="/2023/05/04/20230504/20230504_01.jpg" alt="20230504_01"></p>
<h3 id="算法设计与分析作业-3"><a href="#算法设计与分析作业-3" class="headerlink" title="算法设计与分析作业  3"></a>算法设计与分析作业  3</h3><p>晚上写了一下 算法设计与分析作业 3</p>
<p>求最长不下降序列的代码</p>
<p>例如：</p>
<p>在以下数组中，求最长不下降序列。其结果就是  1，2，6，9</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>，<span class="number">2</span>，<span class="number">6</span>，<span class="number">4</span>，<span class="number">9</span>，<span class="number">-9</span>，<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>如果只有一个数字，那么最长不下降序列就是它本身，即记第一个元素为1（即在dp数组的对应位置中记为1）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>如果接下来的元素值比前一个元素大，且dp值小于或等于前一个元素的dp值+1，那么这个元素的dp值+1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//因为2&gt;1且2的dp值（也就是1）等于1的dp值，所以2的dp值可以+1</span></span><br><span class="line">dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//以此类推</span></span><br><span class="line">dp[<span class="number">3</span>] = <span class="number">3</span>;<span class="comment">//第三个数字是6，</span></span><br><span class="line">dp[<span class="number">4</span>] = <span class="number">3</span>;<span class="comment">//因为6&lt;4,只能从2的dp上+1</span></span><br><span class="line">dp[<span class="number">5</span>] = <span class="number">4</span>;<span class="comment">//不论从6的dp值算还是从4的dp值算，都是4</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//以此类推</span></span><br></pre></td></tr></table></figure>

<p>具体代码实现如下（cout出来的只是一个数字，可以修改，但是核心思想相同）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_SIZE = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[MAX_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> dp[MAX_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt;= arr[j] &amp;&amp; (dp[j] + <span class="number">1</span>) &gt; dp[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>What I did today</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
